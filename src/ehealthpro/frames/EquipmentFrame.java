/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ehealthpro.frames;

import com.sun.glass.events.KeyEvent;
import ehealthpro.daoimpls.EquipmentDAOImpl;
import ehealthpro.daoimpls.EquipmentTypeDAOImpl;
import ehealthpro.daoimpls.ManufacturerDAOImpl;
import ehealthpro.daoimpls.UserPermissionDAOImpl;
import ehealthpro.models.EquipmentModel;
import ehealthpro.models.EquipmentTypeModel;
import ehealthpro.models.ManufacturerModel;
import ehealthpro.models.PermissionModel;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author sweng
 */
public class EquipmentFrame extends javax.swing.JFrame {

    /**
     * Creates new form EquipmentFrame
     */
    Integer equipmentId = null;
    Timestamp currentDate = new Timestamp(System.currentTimeMillis());
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    public EquipmentFrame() {
        initComponents();
        fillequipmentTypeComboBox();
        fillManufacturerComboBox();
        fillEquipmentTable();
        addButton.setVisible(false);
        updateButton.setVisible(false);
        deleteButton.setVisible(false);
        resetAddButton();
        this.setTitle("Equipment Frame || E-Health Pro");
        this.setResizable(false);
        checkPermissions();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        equipmentNameTextfield = new javax.swing.JTextField();
        warantyTextfield = new javax.swing.JTextField();
        quaintityTextfield = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        equipmentTypeComboBox = new javax.swing.JComboBox<>();
        manufacturerComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        equipmentTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        purchaseDateChooser = new com.toedter.calendar.JDateChooser();
        backButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearFieldsButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setToolTipText("");
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("Equipments");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 0, 270, 62));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("Equipment Name :");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, -1, -1));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("Purchase Date : ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 170, -1, 30));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("Waranty : ");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 220, -1, 30));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 0, 0));
        jLabel5.setText("Quaintity : ");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 120, -1, 30));

        equipmentNameTextfield.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(equipmentNameTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 120, 254, 31));

        warantyTextfield.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        warantyTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                warantyTextfieldKeyTyped(evt);
            }
        });
        jPanel1.add(warantyTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 220, 254, 32));

        quaintityTextfield.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        quaintityTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quaintityTextfieldKeyTyped(evt);
            }
        });
        jPanel1.add(quaintityTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 120, 247, 32));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 0));
        jLabel6.setText("Equipment Type :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 170, -1, 30));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setText("Manufacturer : ");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 220, -1, 30));

        equipmentTypeComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        equipmentTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select equipment Type" }));
        equipmentTypeComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(equipmentTypeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 170, 247, 31));

        manufacturerComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        manufacturerComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select manufacturer" }));
        manufacturerComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(manufacturerComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 220, 247, 32));

        equipmentTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        equipmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        equipmentTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                equipmentTableMouseMoved(evt);
            }
        });
        equipmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                equipmentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(equipmentTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 1250, 290));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 0));
        jLabel8.setText("Equipments Record Table : ");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));

        purchaseDateChooser.setDateFormatString("yyyy-MM-dd HH:mm:ss");
        jPanel1.add(purchaseDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 170, 254, 31));

        backButton.setBackground(new java.awt.Color(153, 0, 0));
        backButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/back.png"))); // NOI18N
        backButton.setText("Back");
        backButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        backButton.setContentAreaFilled(false);
        backButton.setOpaque(true);
        backButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backButtonMouseMoved(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 160, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 610));

        jPanel2.setBackground(new java.awt.Color(153, 0, 0));
        jPanel2.setToolTipText("");
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel2MouseMoved(evt);
            }
        });
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        updateButton.setBackground(new java.awt.Color(255, 255, 255));
        updateButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/update.png"))); // NOI18N
        updateButton.setText("Update Record");
        updateButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateButton.setContentAreaFilled(false);
        updateButton.setOpaque(true);
        updateButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                updateButtonMouseMoved(evt);
            }
        });
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel2.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 40, 220, 50));

        deleteButton.setBackground(new java.awt.Color(255, 255, 255));
        deleteButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/trash.png"))); // NOI18N
        deleteButton.setText("Delete Record");
        deleteButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteButton.setContentAreaFilled(false);
        deleteButton.setOpaque(true);
        deleteButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                deleteButtonMouseMoved(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel2.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 40, 220, 50));

        clearFieldsButton.setBackground(new java.awt.Color(255, 255, 255));
        clearFieldsButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        clearFieldsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/clearFields.png"))); // NOI18N
        clearFieldsButton.setText("Clear All Fields");
        clearFieldsButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        clearFieldsButton.setContentAreaFilled(false);
        clearFieldsButton.setOpaque(true);
        clearFieldsButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                clearFieldsButtonMouseMoved(evt);
            }
        });
        clearFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsButtonActionPerformed(evt);
            }
        });
        jPanel2.add(clearFieldsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 40, 220, 50));

        addButton.setBackground(new java.awt.Color(255, 255, 255));
        addButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/add.png"))); // NOI18N
        addButton.setText("Add Record");
        addButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addButton.setContentAreaFilled(false);
        addButton.setOpaque(true);
        addButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addButtonMouseMoved(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel2.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 220, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 610, 1290, 120));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if(equipmentNameTextfield.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please insert equipment name");
        }else if(purchaseDateChooser.getDate().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please insert purchase date");
        }else if(quaintityTextfield.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please insert quaintity");
        }else{
            String equipmentName = equipmentNameTextfield.getText();
            Timestamp purchaseDate = Timestamp.valueOf(sdf.format(purchaseDateChooser.getDate()));
            Integer quaintity = Integer.parseInt(quaintityTextfield.getText());
            String waranty = warantyTextfield.getText();
            String equipmentType = equipmentTypeComboBox.getSelectedItem().toString();
            EquipmentTypeModel equipmentTypeModel = new EquipmentTypeDAOImpl().getEquipmentTypeByName(equipmentType);
            String manufacturer = manufacturerComboBox.getSelectedItem().toString();
            ManufacturerModel manufacturerModel = new ManufacturerDAOImpl().getManufacturerByName(manufacturer);
            EquipmentModel equipmentModel = new EquipmentModel();
           if(warantyTextfield.getText().equals(""))
            {
                equipmentModel.setEquipmentTypeModel(equipmentTypeModel);
                equipmentModel.setManufacturerModel(manufacturerModel);
                equipmentModel.setName(equipmentName);
                equipmentModel.setPurchaseDate(purchaseDate);
                equipmentModel.setQuaintity(quaintity);
                waranty = "Null";
                equipmentModel.setWarranty(waranty);
                equipmentModel.setCreatedBy(1);
                equipmentModel.setCreatedDate(currentDate);
                equipmentModel.setModifiedBy(1);
                equipmentModel.setModifiedDate(currentDate);
                int result = new EquipmentDAOImpl().addEquipment(equipmentModel);
                if(result>0)
                {
                    JOptionPane.showMessageDialog(this, result+" record has been added successfully.");
                }else{
                    JOptionPane.showMessageDialog(this, "Could not add record try again.");
                }
                fillEquipmentTable();
                clearAllFields();
            }else{
                
                equipmentModel.setEquipmentTypeModel(equipmentTypeModel);
                equipmentModel.setManufacturerModel(manufacturerModel);
                equipmentModel.setName(equipmentName);
                equipmentModel.setPurchaseDate(purchaseDate);
                equipmentModel.setQuaintity(quaintity);
                equipmentModel.setWarranty(waranty);
                equipmentModel.setCreatedBy(1);
                equipmentModel.setCreatedDate(currentDate);
                equipmentModel.setModifiedBy(1);
                equipmentModel.setModifiedDate(currentDate);
                int result = new EquipmentDAOImpl().addEquipment(equipmentModel);
                if(result>0)
                {
                    JOptionPane.showMessageDialog(this, result+" record has been added successfully.");
                }else{
                    JOptionPane.showMessageDialog(this, "Could not add record try again.");
                }
                fillEquipmentTable();
                clearAllFields();
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void equipmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_equipmentTableMouseClicked
        equipmentId = (Integer) equipmentTable.getValueAt(equipmentTable.getSelectedRow(), 0);
        EquipmentModel equipmentModel = new EquipmentDAOImpl().getEquipmentById(equipmentId);
        equipmentNameTextfield.setText(equipmentModel.getName());
        purchaseDateChooser.setDate(equipmentModel.getPurchaseDate());
        quaintityTextfield.setText(Integer.toString(equipmentModel.getQuaintity()));
        if(equipmentModel.getManufacturerModel().getName().equals("Null") || equipmentModel.getManufacturerModel().getName().equals(""))
        {
            warantyTextfield.setText("");
        }else{
            warantyTextfield.setText(equipmentModel.getWarranty());
        }
        equipmentTypeComboBox.setSelectedItem(equipmentModel.getEquipmentTypeModel().getName());
        manufacturerComboBox.setSelectedItem(equipmentModel.getManufacturerModel().getName());
        setButtons();
    }//GEN-LAST:event_equipmentTableMouseClicked

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if(equipmentNameTextfield.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please insert equipment name");
        }else if(purchaseDateChooser.getDate().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please insert purchase date");
        }else if(quaintityTextfield.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please insert quaintity");
        }else{
            String equipmentName = equipmentNameTextfield.getText();
            Timestamp purchaseDate = Timestamp.valueOf(sdf.format(purchaseDateChooser.getDate()));
            Integer quaintity = Integer.parseInt(quaintityTextfield.getText());
            String waranty = warantyTextfield.getText();
            String equipmentType = equipmentTypeComboBox.getSelectedItem().toString();
            EquipmentTypeModel equipmentTypeModel = new EquipmentTypeDAOImpl().getEquipmentTypeByName(equipmentType);
            String manufacturer = manufacturerComboBox.getSelectedItem().toString();
            ManufacturerModel manufacturerModel = new ManufacturerDAOImpl().getManufacturerByName(manufacturer);
            EquipmentModel equipmentModel = new EquipmentModel();
           if(warantyTextfield.getText().equals(""))
            {
                equipmentModel.setEquipmentId(equipmentId);
                equipmentModel.setEquipmentTypeModel(equipmentTypeModel);
                equipmentModel.setManufacturerModel(manufacturerModel);
                equipmentModel.setName(equipmentName);
                equipmentModel.setPurchaseDate(purchaseDate);
                equipmentModel.setQuaintity(quaintity);
                waranty = "Null";
                equipmentModel.setWarranty(waranty);
                equipmentModel.setModifiedBy(2);
                equipmentModel.setModifiedDate(currentDate);
                int result = new EquipmentDAOImpl().updateEquipment(equipmentModel);
                if(result>0)
                {
                    JOptionPane.showMessageDialog(this, result+" record has been updated successfully.");
                }else{
                    JOptionPane.showMessageDialog(this, "Could not update record try again.");
                }
                fillEquipmentTable();
                clearAllFields();
            }else{
                equipmentModel.setEquipmentId(equipmentId);                
                equipmentModel.setEquipmentTypeModel(equipmentTypeModel);
                equipmentModel.setManufacturerModel(manufacturerModel);
                equipmentModel.setName(equipmentName);
                equipmentModel.setPurchaseDate(purchaseDate);
                equipmentModel.setQuaintity(quaintity);
                equipmentModel.setWarranty(waranty);
                equipmentModel.setModifiedBy(2);
                equipmentModel.setModifiedDate(currentDate);
                int result = new EquipmentDAOImpl().updateEquipment(equipmentModel);
                if(result>0)
                {
                    JOptionPane.showMessageDialog(this, result+" record has been updated successfully.");
                }else{
                    JOptionPane.showMessageDialog(this, "Could not update record try again.");
                }
                fillEquipmentTable();
                clearAllFields();
            }
        }        
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
                EquipmentModel equipmentModel = new EquipmentModel();
                equipmentModel.setEquipmentId(equipmentId);
                equipmentModel.setModifiedBy(2);
                equipmentModel.setModifiedDate(currentDate);
                int result = new EquipmentDAOImpl().deleteEquipment(equipmentModel);
                if(result>0)
                {
                    JOptionPane.showMessageDialog(this, result+" record has been deleted successfully.");
                }else{
                    JOptionPane.showMessageDialog(this, "Could not delete record try again.");
                }
                fillEquipmentTable();
                clearAllFields();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jPanel2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel2MouseMoved

    private void equipmentTableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_equipmentTableMouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(resetColor());
    }//GEN-LAST:event_equipmentTableMouseMoved

    private void addButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseMoved
        if (addButton.isEnabled()) {
            addButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_addButtonMouseMoved

    private void updateButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseMoved
        if (updateButton.isEnabled()) {
            updateButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_updateButtonMouseMoved

    private void deleteButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseMoved
        if (deleteButton.isEnabled()) {
            deleteButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_deleteButtonMouseMoved

    private void clearFieldsButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFieldsButtonMouseMoved
        if (clearFieldsButton.isEnabled()) {
            clearFieldsButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_clearFieldsButtonMouseMoved

    private void backButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseMoved
        if (backButton.isEnabled()) {
            backButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_backButtonMouseMoved

    private void clearFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsButtonActionPerformed
        clearAllFields();
    }//GEN-LAST:event_clearFieldsButtonActionPerformed

    private void warantyTextfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_warantyTextfieldKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACKSPACE) || (c==KeyEvent.VK_DELETE)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_warantyTextfieldKeyTyped

    private void quaintityTextfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quaintityTextfieldKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACKSPACE) || (c==KeyEvent.VK_DELETE)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_quaintityTextfieldKeyTyped

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new MainMenuFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EquipmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EquipmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EquipmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EquipmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EquipmentFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearFieldsButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField equipmentNameTextfield;
    private javax.swing.JTable equipmentTable;
    private javax.swing.JComboBox<String> equipmentTypeComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> manufacturerComboBox;
    private com.toedter.calendar.JDateChooser purchaseDateChooser;
    private javax.swing.JTextField quaintityTextfield;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField warantyTextfield;
    // End of variables declaration//GEN-END:variables

    private void fillequipmentTypeComboBox() {
        ResultSet resultSet = new EquipmentTypeDAOImpl().getAllEquipmentType();
        try{
            while(resultSet.next()){
                equipmentTypeComboBox.addItem(resultSet.getString("Equipment Type"));
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    private void fillManufacturerComboBox() {
        ResultSet resultSet = new ManufacturerDAOImpl().getAllManufacturer();
        try{
            while(resultSet.next())
            {
                manufacturerComboBox.addItem(resultSet.getString("Manufacturer"));
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    private void fillEquipmentTable() {
        ResultSet resultSet = new EquipmentDAOImpl().getAllEquipment();
        equipmentTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }
    
        
     private void clearAllFields() {
        equipmentNameTextfield.setText("");
        purchaseDateChooser.setDate(null);
        manufacturerComboBox.setSelectedIndex(0);
        equipmentTypeComboBox.setSelectedIndex(0);
        equipmentTable.clearSelection();
        warantyTextfield.setText("");
        quaintityTextfield.setText("");
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
        clearFieldsButton.setEnabled(false);
            
    }
    private Color resetColor()
    {
        return Color.BLACK;
    }
    
    public void setButtons() {
        addButton.setEnabled(false);
        updateButton.setEnabled(true);
        deleteButton.setEnabled(true);
    }
    private void resetAddButton()
    {
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }
    
    private void checkPermissions() {
        ResultSet assignedPermissions = new UserPermissionDAOImpl().getAssignedPermissions(LoginFrame.userType); 
        try {
            while(assignedPermissions.next())
            {
                PermissionModel permissionModel = new PermissionModel();
                permissionModel.setPermission(assignedPermissions.getString("Permission"));
                
                if(permissionModel.getPermission().equals("ADD_EQUIPMENT"))
                {
                    addButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("DELETE_EQUIPMENT"))
                {
                    deleteButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("UPDATE_EQUIPMENT"))
                {
                    updateButton.setVisible(true);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainMenuFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
}
