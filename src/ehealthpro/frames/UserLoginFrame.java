/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ehealthpro.frames;

import ehealthpro.daoimpls.EmployeeDAOImpl;
import ehealthpro.daoimpls.UserLoginDAOImpl;
import ehealthpro.daoimpls.UserPermissionDAOImpl;
import ehealthpro.daoimpls.UserTypeDAOImpl;
import ehealthpro.models.EmployeeModel;
import ehealthpro.models.PermissionModel;
import ehealthpro.models.UserLoginModel;
import ehealthpro.models.UserTypeModel;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import java.sql.Timestamp;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author sweng
 */
public class UserLoginFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewUserLoginFrame
     */
    Integer userId;
    Timestamp currentDate = new Timestamp(System.currentTimeMillis());
    public UserLoginFrame() {
        initComponents();
        fillEmployeeComboBox();
        fillUserTypeComboBox();
        this.setTitle("New User || E-Health Pro");
        this.setResizable(false);
        fillUserTable();
        addButton.setVisible(false);
        updateButton.setVisible(false);
        deleteButton.setVisible(false);
        checkPermissions();
        resetAddButton();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        clearFieldsButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        conformPasswordField = new javax.swing.JPasswordField();
        passwordField = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        userTypeComboBox = new javax.swing.JComboBox<>();
        employeeNameComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(153, 0, 0));
        jPanel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel3MouseMoved(evt);
            }
        });
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        clearFieldsButton.setBackground(new java.awt.Color(255, 255, 255));
        clearFieldsButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        clearFieldsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/clearFields.png"))); // NOI18N
        clearFieldsButton.setText("Clear All Fields");
        clearFieldsButton.setBorder(null);
        clearFieldsButton.setContentAreaFilled(false);
        clearFieldsButton.setOpaque(true);
        clearFieldsButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                clearFieldsButtonMouseMoved(evt);
            }
        });
        clearFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsButtonActionPerformed(evt);
            }
        });
        jPanel3.add(clearFieldsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 40, 200, 50));

        deleteButton.setBackground(new java.awt.Color(255, 255, 255));
        deleteButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/trash.png"))); // NOI18N
        deleteButton.setText("Delete Record");
        deleteButton.setBorder(null);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setOpaque(true);
        deleteButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                deleteButtonMouseMoved(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel3.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 40, 210, 50));

        updateButton.setBackground(new java.awt.Color(255, 255, 255));
        updateButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/update.png"))); // NOI18N
        updateButton.setText("Update Record");
        updateButton.setBorder(null);
        updateButton.setContentAreaFilled(false);
        updateButton.setOpaque(true);
        updateButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                updateButtonMouseMoved(evt);
            }
        });
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel3.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, 220, 50));

        addButton.setBackground(new java.awt.Color(255, 255, 255));
        addButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/add.png"))); // NOI18N
        addButton.setText("Add Record");
        addButton.setBorder(null);
        addButton.setContentAreaFilled(false);
        addButton.setOpaque(true);
        addButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addButtonMouseMoved(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel3.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 220, 50));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 620, 1390, 120));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("User Details");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 0, 270, 40));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 0, 0));
        jLabel9.setText("Users Record :");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 170, 27));

        conformPasswordField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(conformPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 290, 350, 40));

        passwordField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(passwordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 230, 350, 40));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 0));
        jLabel8.setText("Password :");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 230, 90, 27));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 0));
        jLabel6.setText("User Type :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 230, 120, 27));

        userTypeComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        userTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select User Type" }));
        jPanel1.add(userTypeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 230, 300, 30));

        employeeNameComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        employeeNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Employee Name" }));
        employeeNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeNameComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(employeeNameComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 160, 300, 30));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 0, 0));
        jLabel10.setText("Employee Name :");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 160, 160, 27));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setText("User Name :");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, 120, 30));

        userNameTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(userNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 160, 350, 40));

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        userTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 1360, 220));

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 0, 0));
        jLabel11.setText("Conform Password :");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 300, 180, 27));

        backButton.setBackground(new java.awt.Color(153, 0, 0));
        backButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/back.png"))); // NOI18N
        backButton.setText("Back");
        backButton.setBorder(null);
        backButton.setContentAreaFilled(false);
        backButton.setOpaque(true);
        backButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backButtonMouseMoved(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 150, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-9, -2, 1400, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseMoved
        if (updateButton.isEnabled()) {
            updateButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_updateButtonMouseMoved

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
    if(userNameTextField.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please fill user name field to update record.");
        }else if(passwordField.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please fill password field to update record.");
        }else if(conformPasswordField.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please fill conform password field to update record.");
        }else if(employeeNameComboBox.getSelectedItem().toString().equals("Select Employee Name"))
        {
            JOptionPane.showMessageDialog(this, "Please select employee name to update record.");
        }else if(userTypeComboBox.getSelectedItem().toString().equals("Select User Type"))
        {
            JOptionPane.showMessageDialog(this, "Please select user type to update record.");
        }else{
            String name = userNameTextField.getText();
            String password = passwordField.getText();
            String employeeName = employeeNameComboBox.getSelectedItem().toString();
            String userType = userTypeComboBox.getSelectedItem().toString();
            EmployeeModel employeeModel = new EmployeeDAOImpl().getEmployeeByName(employeeName);
            UserTypeModel userTypeModel = new UserTypeDAOImpl().getUserTypeByName(userType);
            UserLoginModel userLoginModel = new UserLoginModel();
            userLoginModel.setName(name);
            userLoginModel.setPassword(password);
            userLoginModel.setUserTypeModel(userTypeModel);
            userLoginModel.setEmployeeModel(employeeModel);
            userLoginModel.setModifiedBy(2);
            userLoginModel.setUserId(userId);
            userLoginModel.setModifiedDate(currentDate);    
            String confirmPassword = conformPasswordField.getText();
            if(confirmPassword.equals(password))
            {
                int result = new UserLoginDAOImpl().updateUser(userLoginModel);
                if(result>0)
                {
                    JOptionPane.showMessageDialog(this, result+" record has been update successfully.");
                    fillUserTable();
                    clearAllFields();
                }else
                {
                    JOptionPane.showMessageDialog(this, "Could not update record try again.");
                }
            }else
            {
                JOptionPane.showMessageDialog(this, "Password field does not match with Confirm Password field.");
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void addButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseMoved
        if (addButton.isEnabled()) {
            addButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_addButtonMouseMoved

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if(userNameTextField.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please fill user name field to add record.");
        }else if(passwordField.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please fill password field to add record.");
        }else if(conformPasswordField.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please fill conform password field to add record.");
        }else if(employeeNameComboBox.getSelectedItem().toString().equals("Select Employee Name"))
        {
            JOptionPane.showMessageDialog(this, "Please select employee name to add record.");
        }else if(userTypeComboBox.getSelectedItem().toString().equals("Select User Type"))
        {
            JOptionPane.showMessageDialog(this, "Please select user type to add record.");
        }else{
            String name = userNameTextField.getText();
            String password = passwordField.getText();
            String employeeName = employeeNameComboBox.getSelectedItem().toString();
            String userType = userTypeComboBox.getSelectedItem().toString();
            EmployeeModel employeeModel = new EmployeeDAOImpl().getEmployeeByName(employeeName);
            UserTypeModel userTypeModel = new UserTypeDAOImpl().getUserTypeByName(userType);
            UserLoginModel userLoginModel = new UserLoginModel();
            userLoginModel.setName(name);
            userLoginModel.setPassword(password);
            userLoginModel.setUserTypeModel(userTypeModel);
            userLoginModel.setEmployeeModel(employeeModel);
            userLoginModel.setCreatedBy(1);
            userLoginModel.setCreatedDate(currentDate);
            userLoginModel.setModifiedBy(1);
            userLoginModel.setModifiedDate(currentDate);
            boolean check = new UserLoginDAOImpl().checkUserNameUniqueness(name);
            if(check==true)
            {
                JOptionPane.showMessageDialog(this, name+" is not available try another name.");
            }else{
                
                String confirmPassword = conformPasswordField.getText();
                if(confirmPassword.equals(password))
                {
                    int result = new UserLoginDAOImpl().addUser(userLoginModel);
                    if(result>0)
                    {
                        JOptionPane.showMessageDialog(this, result+" record has been added successfully.");
                        fillUserTable();
                        clearAllFields();
                    }else{
                        JOptionPane.showMessageDialog(this, "Could not add record try again.");
                    }
                }else{
                  JOptionPane.showMessageDialog(this, "Password field does not match with Confirm Password field.");
                }
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void clearFieldsButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFieldsButtonMouseMoved
        if (clearFieldsButton.isEnabled()) {
            clearFieldsButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_clearFieldsButtonMouseMoved

    private void clearFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsButtonActionPerformed
        clearAllFields();
    }//GEN-LAST:event_clearFieldsButtonActionPerformed

    private void backButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseMoved
        if (backButton.isEnabled()) {
            backButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_backButtonMouseMoved

    private void deleteButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseMoved
        if (deleteButton.isEnabled()) {
            deleteButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_deleteButtonMouseMoved

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        UserLoginModel userLoginModel = new UserLoginModel();
        userLoginModel.setModifiedBy(1);
        userLoginModel.setUserId(userId);
        userLoginModel.setModifiedDate(currentDate);
        int result = new UserLoginDAOImpl().deleteUserById(userLoginModel);
        if(result>0)
        {
            JOptionPane.showMessageDialog(this, "Record has been deleted successfully.");
            fillUserTable();
        }else
        {
                JOptionPane.showMessageDialog(this, "Could not delete record try again.");
        }
        clearAllFields();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void jPanel3MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseMoved

        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel3MouseMoved

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel3MouseClicked

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void employeeNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeNameComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeNameComboBoxActionPerformed

    private void userTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userTableMouseClicked
        userId = (Integer) userTable.getValueAt(userTable.getSelectedRow(), 0);
        UserLoginModel userLoginModel = new UserLoginDAOImpl().getUserById(userId);
        userNameTextField.setText(userLoginModel.getName());
        passwordField.setText(userLoginModel.getPassword());
        conformPasswordField.setText(userLoginModel.getPassword());
        employeeNameComboBox.setSelectedItem(userLoginModel.getEmployeeModel().getName());
        userTypeComboBox.setSelectedItem(userLoginModel.getUserTypeModel().getUserType());
        setButtons();
    }//GEN-LAST:event_userTableMouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new MainMenuFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserLoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserLoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserLoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserLoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserLoginFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearFieldsButton;
    private javax.swing.JPasswordField conformPasswordField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> employeeNameComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField userNameTextField;
    private javax.swing.JTable userTable;
    private javax.swing.JComboBox<String> userTypeComboBox;
    // End of variables declaration//GEN-END:variables
    private void fillEmployeeComboBox() {
        ResultSet resultSet = new EmployeeDAOImpl().getAllDoctorEmployees();
        try {
            while (resultSet.next()) {
                employeeNameComboBox.addItem(resultSet.getString("name"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillUserTypeComboBox() {
        ResultSet resultSet = new UserTypeDAOImpl().getAllUserTypes();
        try {
            while (resultSet.next()) {
                userTypeComboBox.addItem(resultSet.getString("User Type"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
        
    private void clearAllFields() {
        userNameTextField.setText("");
        employeeNameComboBox.setSelectedIndex(0);
        userTypeComboBox.setSelectedIndex(0);
        passwordField.setText("");
        conformPasswordField.setText("");
        userTable.clearSelection();
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
        
    }
    
    private Color resetColor() {
        return Color.BLACK;
    }
    
    private void setButtons() {
        addButton.setEnabled(false);
        updateButton.setEnabled(true);
        deleteButton.setEnabled(true);
    }
    
    private void resetAddButton() {
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }

    private void fillUserTable() {
        ResultSet resultSet = new UserLoginDAOImpl().getAllUsers();
        userTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }
    
    private void checkPermissions() {
        ResultSet assignedPermissions = new UserPermissionDAOImpl().getAssignedPermissions(LoginFrame.userType); 
        try {
            while(assignedPermissions.next())
            {
                PermissionModel permissionModel = new PermissionModel();
                permissionModel.setPermission(assignedPermissions.getString("Permission"));
                
                if(permissionModel.getPermission().equals("ADD_USER"))
                {
                    addButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("DELETE_USER"))
                {
                    deleteButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("UPDATE_USER"))
                {
                    updateButton.setVisible(true);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainMenuFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
