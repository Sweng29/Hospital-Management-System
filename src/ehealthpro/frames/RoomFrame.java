/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ehealthpro.frames;

import ehealthpro.daoimpls.RoomDetailDAOImpl;
import ehealthpro.daoimpls.RoomTypeDAOImpl;
import ehealthpro.daoimpls.UserPermissionDAOImpl;
import ehealthpro.daoimpls.WardDAOImpl;
import ehealthpro.models.PermissionModel;
import ehealthpro.models.RoomDetailModel;
import ehealthpro.models.RoomTypeModel;
import ehealthpro.models.WardModel;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author sweng
 */
public class RoomFrame extends javax.swing.JFrame {

    /**
     * Creates new form RoomNewFrame
     */
    Integer roomId;

    public RoomFrame() {
        initComponents();
        fillRoomTable();
        fillRoomTypeComboBox();
        fillWardComboBox();
        addButton.setVisible(false);
        updateButton.setVisible(false);
        deleteButton.setVisible(false);
        checkPermissions();
        this.setResizable(false);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
        addButton.setEnabled(true);
        clearFieldsButton.setEnabled(false);
        this.setTitle("Room Details || E-Health Pro");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fieldsPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        roomNo = new javax.swing.JTextField();
        roomTypeCombo = new javax.swing.JComboBox<>();
        wardCombo = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearFieldsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fieldsPanel.setBackground(new java.awt.Color(255, 255, 255));
        fieldsPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                fieldsPanelMouseMoved(evt);
            }
        });
        fieldsPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fieldsPanelMouseClicked(evt);
            }
        });
        fieldsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setForeground(new java.awt.Color(102, 153, 255));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setText("Room Number : ");

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 0));
        jLabel8.setText("Select Ward : ");

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(153, 0, 0));
        jLabel14.setText("Select Room Type :");

        roomNo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        roomNo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        roomNo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomNoMouseClicked(evt);
            }
        });
        roomNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNoActionPerformed(evt);
            }
        });
        roomNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                roomNoKeyReleased(evt);
            }
        });

        roomTypeCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        roomTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Room Type.." }));
        roomTypeCombo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        roomTypeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                roomTypeComboItemStateChanged(evt);
            }
        });
        roomTypeCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomTypeComboMouseClicked(evt);
            }
        });
        roomTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomTypeComboActionPerformed(evt);
            }
        });

        wardCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        wardCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select  ward.." }));
        wardCombo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        wardCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                wardComboItemStateChanged(evt);
            }
        });
        wardCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wardComboMouseClicked(evt);
            }
        });
        wardCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wardComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(wardCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roomTypeCombo, 0, 288, Short.MAX_VALUE)
                    .addComponent(roomNo))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roomNo, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wardCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        fieldsPanel.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, -1, -1));

        jLabel16.setBackground(new java.awt.Color(204, 204, 204));
        jLabel16.setFont(new java.awt.Font("Berlin Sans FB", 0, 48)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(153, 0, 0));
        jLabel16.setText("Rooms Details");
        fieldsPanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 0, -1, -1));

        roomTable.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        roomTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        roomTable.setGridColor(new java.awt.Color(0, 102, 255));
        roomTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(roomTable);

        fieldsPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 1240, 230));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("Room Details Record :");
        fieldsPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, -1, -1));

        backButton.setBackground(new java.awt.Color(153, 0, 0));
        backButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/back.png"))); // NOI18N
        backButton.setText("Go Back");
        backButton.setBorder(null);
        backButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backButtonMouseMoved(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        fieldsPanel.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 160, 50));

        getContentPane().add(fieldsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 1, 1280, 620));

        jPanel6.setBackground(new java.awt.Color(153, 0, 0));
        jPanel6.setToolTipText("");
        jPanel6.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel6MouseMoved(evt);
            }
        });
        jPanel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel6MouseClicked(evt);
            }
        });
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(102, 102, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel6.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 162, 290, -1));

        addButton.setBackground(new java.awt.Color(255, 255, 255));
        addButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/add.png"))); // NOI18N
        addButton.setText("Add Room");
        addButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addButton.setContentAreaFilled(false);
        addButton.setOpaque(true);
        addButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addButtonMouseMoved(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel6.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 230, -1));

        updateButton.setBackground(new java.awt.Color(255, 255, 255));
        updateButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/update.png"))); // NOI18N
        updateButton.setText("Update Room");
        updateButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateButton.setContentAreaFilled(false);
        updateButton.setOpaque(true);
        updateButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                updateButtonMouseMoved(evt);
            }
        });
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel6.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 230, -1));

        deleteButton.setBackground(new java.awt.Color(255, 255, 255));
        deleteButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/trash.png"))); // NOI18N
        deleteButton.setText("Delete Room");
        deleteButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteButton.setContentAreaFilled(false);
        deleteButton.setOpaque(true);
        deleteButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                deleteButtonMouseMoved(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel6.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 30, 220, -1));

        clearFieldsButton.setBackground(new java.awt.Color(255, 255, 255));
        clearFieldsButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        clearFieldsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/clearFields.png"))); // NOI18N
        clearFieldsButton.setText("Clear All Fields");
        clearFieldsButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        clearFieldsButton.setContentAreaFilled(false);
        clearFieldsButton.setOpaque(true);
        clearFieldsButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                clearFieldsButtonMouseMoved(evt);
            }
        });
        clearFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsButtonActionPerformed(evt);
            }
        });
        jPanel6.add(clearFieldsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 30, 200, -1));

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 620, 1280, 110));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void roomNoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomNoMouseClicked

    }//GEN-LAST:event_roomNoMouseClicked

    private void roomNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNoActionPerformed

    }//GEN-LAST:event_roomNoActionPerformed

    private void roomTypeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_roomTypeComboItemStateChanged
        if (!roomTypeCombo.getSelectedItem().equals("Select Room Type..")) {
            clearFieldsButton.setEnabled(true);
        }
    }//GEN-LAST:event_roomTypeComboItemStateChanged

    private void roomTypeComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomTypeComboMouseClicked
        //addButton.setEnabled(true);
        // while updating add button should be diabled and then enabled.
        //so complete this task for both delete and update/////////..
    }//GEN-LAST:event_roomTypeComboMouseClicked

    private void roomTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomTypeComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomTypeComboActionPerformed

    private void wardComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_wardComboItemStateChanged
        if (!wardCombo.getSelectedItem().equals("Select  ward..")) {
            clearFieldsButton.setEnabled(true);
        }
    }//GEN-LAST:event_wardComboItemStateChanged

    private void wardComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wardComboMouseClicked
        //addButton.setEnabled(true);
    }//GEN-LAST:event_wardComboMouseClicked

    private void wardComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wardComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wardComboActionPerformed

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel2MouseClicked

    private void roomTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomTableMouseClicked
        roomId = (Integer) roomTable.getValueAt(roomTable.getSelectedRow(), 0);
        RoomDetailDAOImpl roomDetailDAOImpl = new RoomDetailDAOImpl();
        RoomDetailModel roomDetailModel = roomDetailDAOImpl.getRoomDetailById(roomId);
        roomNo.setText(roomDetailModel.getRoomNo());
        roomTypeCombo.setSelectedIndex(roomDetailModel.getRoomTypeModel().getRoomTypeId());
        wardCombo.setSelectedIndex(roomDetailModel.getWardModel().getWardId());
        updateButton.setEnabled(true);
        deleteButton.setEnabled(true);
        addButton.setEnabled(false);
        clearFieldsButton.setEnabled(true);
    }//GEN-LAST:event_roomTableMouseClicked

    private void addButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseMoved
        if (addButton.isEnabled()) {
            addButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_addButtonMouseMoved

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
       
        RoomTypeModel roomTypeModel = null;
        WardModel wardModel = null;

        if (roomNo.getText().equals("") || roomTypeCombo.getSelectedItem().equals("Select Room Type..") || wardCombo.getSelectedItem().equals("Select  ward..")) {
            JOptionPane.showMessageDialog(this, "Please fill all fields to add record.");
        } else if (roomNo.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please add room no to add record.");
        } else if (roomTypeCombo.getSelectedItem().toString().equals("Select Room Type..")) {
            JOptionPane.showMessageDialog(this, "Please select room type to add record.");
        } else if (wardCombo.getSelectedItem().toString().equals("Select ward..")) {
            JOptionPane.showMessageDialog(this, "Please select ward to add record.");
        } else {

            String getRoomNo = roomNo.getText();
            String roomType = roomTypeCombo.getSelectedItem().toString();
            String wardName = wardCombo.getSelectedItem().toString();
            RoomTypeDAOImpl roomTypeDAOImpl = new RoomTypeDAOImpl();
            roomTypeModel = roomTypeDAOImpl.getRoomTypeByName(roomType);
            WardDAOImpl wardDAOImpl = new WardDAOImpl();
            wardModel = wardDAOImpl.getWardByName(wardName);
            RoomDetailDAOImpl roomDetailDAOImpl = new RoomDetailDAOImpl();
            RoomDetailModel roomDetailModel = new RoomDetailModel();
            roomDetailModel.setRoomNo(getRoomNo);
            roomDetailModel.setRoomTypeModel(roomTypeModel);
            roomDetailModel.setWardModel(wardModel);
            roomDetailModel.setCreatedBy(1);
            roomDetailModel.setModifiedBy(1);
            Timestamp currentTime = new Timestamp(System.currentTimeMillis());
            roomDetailModel.setCreatedDate(currentTime);
            roomDetailModel.setModifiedDate(currentTime);
            int result = roomDetailDAOImpl.addRoomDetail(roomDetailModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been successfully added.");
                fillRoomTable();
            } else {
                JOptionPane.showMessageDialog(this, result + " record could not be added,try again.");
            }
            clearAllFields(); 
            updateButton.setEnabled(false);
            deleteButton.setEnabled(false);
            clearFieldsButton.setEnabled(false);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseMoved
        if (updateButton.isEnabled()) {
            updateButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_updateButtonMouseMoved

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
               String roomNumber = roomNo.getText();
        String roomType = roomTypeCombo.getSelectedItem().toString();
        String wardName = wardCombo.getSelectedItem().toString();
        RoomTypeModel roomTypeModel = null;
        WardModel wardModel = null;
        if (!roomTypeCombo.getSelectedItem().toString().equals("Select Room Type..")) {
            RoomTypeDAOImpl roomTypeDAOImpl = new RoomTypeDAOImpl();
            roomTypeModel = roomTypeDAOImpl.getRoomTypeByName(roomType);
        }
        if (!wardCombo.getSelectedItem().toString().equals("Select  ward..")) {
            WardDAOImpl wardDAOImpl = new WardDAOImpl();
            wardModel = wardDAOImpl.getWardByName(wardName);
        }
        if (!roomNo.equals("") && !roomTypeCombo.getSelectedItem().toString().equals("Select Room Type..") && !wardName.equals("Select  ward..")) {
            RoomDetailDAOImpl roomDetailDAOImpl = new RoomDetailDAOImpl();
            RoomDetailModel roomDetailModel = new RoomDetailModel();
            roomDetailModel.setRoomId(roomId);
            roomDetailModel.setRoomNo(roomNumber);
            roomDetailModel.setRoomTypeModel(roomTypeModel);
            roomDetailModel.setWardModel(wardModel);
            roomDetailModel.setModifiedBy(1);
            Timestamp currentTime = new Timestamp(System.currentTimeMillis());
            roomDetailModel.setModifiedDate(currentTime);
            int result = roomDetailDAOImpl.updateRoomDetail(roomDetailModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been updated successfully.");
                fillRoomTable();
            } else {
                JOptionPane.showMessageDialog(this, result + " record could not be updated,try again.");
            }
        } else if (wardCombo.getSelectedItem().toString().equals("Select  ward..")) {
            JOptionPane.showMessageDialog(this, "Please add ward details");
        } else if (roomTypeCombo.getSelectedItem().toString().equals("Select Room Type..")) {
            JOptionPane.showMessageDialog(this, "Please add room type details.");
        }
        clearAllFields();
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
        clearFieldsButton.setEnabled(false);
        addButton.setEnabled(true);
    }//GEN-LAST:event_updateButtonActionPerformed

    private void backButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseMoved
        backButton.setForeground(Color.red);
    }//GEN-LAST:event_backButtonMouseMoved

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new MainMenuFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void deleteButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseMoved
        if (deleteButton.isEnabled()) {
            deleteButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_deleteButtonMouseMoved

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
               String roomNumber = roomNo.getText();
        String roomType = roomTypeCombo.getSelectedItem().toString();
        String wardName = wardCombo.getSelectedItem().toString();
        RoomTypeModel roomTypeModel = null;
        roomId = (Integer) roomTable.getValueAt(roomTable.getSelectedRow(), 0);
        WardModel wardModel = null;
        if (!roomTypeCombo.getSelectedItem().toString().equals("Select Room Type..")) {
            RoomTypeDAOImpl roomTypeDAOImpl = new RoomTypeDAOImpl();
            roomTypeModel = roomTypeDAOImpl.getRoomTypeByName(roomType);
        }
        if (!wardCombo.getSelectedItem().toString().equals("Select  ward..")) {
            WardDAOImpl wardDAOImpl = new WardDAOImpl();
            wardModel = wardDAOImpl.getWardByName(wardName);
        }
        if (!roomNo.equals("") && !roomTypeCombo.getSelectedItem().toString().equals("Select Room Type..") && !wardName.equals("Select  ward..")) {
            RoomDetailDAOImpl roomDetailDAOImpl = new RoomDetailDAOImpl();
            RoomDetailModel roomDetailModel = new RoomDetailModel();
            roomDetailModel.setRoomId(roomId);
            roomDetailModel.setModifiedBy(1);
            Timestamp currentTime = new Timestamp(System.currentTimeMillis());
            roomDetailModel.setModifiedDate(currentTime);
            roomDetailModel = roomDetailDAOImpl.getRoomDetailById(roomId);
            int result = roomDetailDAOImpl.deleteRoomDetailById(roomDetailModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been updated successfully.");
                fillRoomTable();
            } else {
                JOptionPane.showMessageDialog(this, result + " record could not be updated,try again.");
            }
        } else if (wardCombo.getSelectedItem().toString().equals("Select  ward..")) {
            JOptionPane.showMessageDialog(this, "Please add ward details");
        } else if (roomTypeCombo.getSelectedItem().toString().equals("Select Room Type..")) {
            JOptionPane.showMessageDialog(this, "Please add room type details.");
        }
        clearAllFields();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void clearFieldsButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFieldsButtonMouseMoved
        if (clearFieldsButton.isEnabled()) {
            clearFieldsButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_clearFieldsButtonMouseMoved

    private void clearFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsButtonActionPerformed
        clearAllFields();
    }//GEN-LAST:event_clearFieldsButtonActionPerformed

    private void jPanel6MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseMoved
       addButton.setForeground(resetColor());
       deleteButton.setForeground(resetColor());
       updateButton.setForeground(resetColor());
       clearFieldsButton.setForeground(resetColor());
       backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel6MouseMoved

    private void jPanel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel6MouseClicked

    private void roomNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roomNoKeyReleased
        if(roomNo.getText().equals(""))
        {
            addButton.setEnabled(true);
            updateButton.setEnabled(false);
            deleteButton.setEnabled(false);
            clearFieldsButton.setEnabled(false);
            roomTable.clearSelection();
        }
    }//GEN-LAST:event_roomNoKeyReleased

    private void fieldsPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fieldsPanelMouseClicked
        clearAllFields();
    }//GEN-LAST:event_fieldsPanelMouseClicked

    private void fieldsPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fieldsPanelMouseMoved
       addButton.setForeground(resetColor());
       deleteButton.setForeground(resetColor());
       updateButton.setForeground(resetColor());
       clearFieldsButton.setForeground(resetColor());
       backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_fieldsPanelMouseMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoomFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoomFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoomFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoomFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoomFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearFieldsButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel fieldsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField roomNo;
    private javax.swing.JTable roomTable;
    private javax.swing.JComboBox<String> roomTypeCombo;
    private javax.swing.JButton updateButton;
    private javax.swing.JComboBox<String> wardCombo;
    // End of variables declaration//GEN-END:variables

    private void clearAllFields() {
        roomNo.setText("");
        roomTable.clearSelection();
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
        clearFieldsButton.setEnabled(false);
        roomTypeCombo.setSelectedIndex(0);
        wardCombo.setSelectedIndex(0);
    }

    private Color resetColor() {
        return Color.BLACK;
    }

    private void fillRoomTable() {

        RoomDetailDAOImpl roomDetailDAOImpl = new RoomDetailDAOImpl();
        ResultSet resultSet = roomDetailDAOImpl.getAllRoomDetails();
        roomTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }

    private void fillRoomTypeComboBox() {
        RoomTypeDAOImpl roomTypeDAOImpl = new RoomTypeDAOImpl();
        ResultSet resultSet = roomTypeDAOImpl.getAllRoomTypes();
        try {
            while (resultSet.next()) {
                roomTypeCombo.addItem(resultSet.getString("Room Type"));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void fillWardComboBox() {
        WardDAOImpl wardDAOImpl = new WardDAOImpl();
        ResultSet resultSet = wardDAOImpl.getAllWards();
        try {
            while (resultSet.next()) {
                wardCombo.addItem(resultSet.getString("Ward Name"));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    private void checkPermissions() {
        ResultSet assignedPermissions = new UserPermissionDAOImpl().getAssignedPermissions(LoginFrame.userType); 
        try {
            while(assignedPermissions.next())
            {
                PermissionModel permissionModel = new PermissionModel();
                permissionModel.setPermission(assignedPermissions.getString("Permission"));
                
                if(permissionModel.getPermission().equals("ADD_ROOM"))
                {
                    addButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("DELETE_ROOM"))
                {
                    deleteButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("UPDATE_ROOM"))
                {
                    updateButton.setVisible(true);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainMenuFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
