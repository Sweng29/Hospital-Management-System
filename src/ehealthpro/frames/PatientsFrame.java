/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ehealthpro.frames;

import ehealthpro.daoimpls.BloodGroupDAOImpl;
import ehealthpro.daoimpls.PatientDAOImpl;
import ehealthpro.daoimpls.UserPermissionDAOImpl;
import ehealthpro.models.BloodGroupModel;
import ehealthpro.models.PatientModel;
import ehealthpro.models.PermissionModel;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import net.proteanit.sql.DbUtils;
import java.sql.Timestamp;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author sweng
 */
public class PatientsFrame extends javax.swing.JFrame {

    /**
     * Creates new form PatientsFrame
     */
    Integer patientId;
    Timestamp currentDate = new Timestamp(System.currentTimeMillis());

    public PatientsFrame() {
        initComponents();
        fillPatientTable();
        fillBloodGroupComboBox();
        this.setTitle("Patients || E-Health Pro");
        this.setResizable(false);
        addButton.setVisible(false);
        updateButton.setVisible(false);
        deleteButton.setVisible(false);
        checkPermissions();
        resetAddButton();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        patientNameTextfield = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        genderComboBox = new javax.swing.JComboBox<>();
        bloodGroupComboBox = new javax.swing.JComboBox<>();
        fatherNameTextfield = new javax.swing.JTextField();
        contactTextfield = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        addressTextArea = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        clearFieldsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("Patient Details");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 0, 300, 60));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("Contact : ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 130, 100, 27));

        patientTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        patientTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                patientTableMouseMoved(evt);
            }
        });
        patientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(patientTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 1290, 320));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("Patients Record : ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, -1));

        patientNameTextfield.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(patientNameTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 290, 30));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("Address :");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 200, -1, 27));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 0, 0));
        jLabel5.setText("Blood Group :");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, 27));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 0));
        jLabel6.setText("Patient Name :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, -1, 27));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setText("Father Name :");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 130, -1, 27));

        genderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Gender", "Male", "Female" }));
        jPanel1.add(genderComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 200, 270, 30));

        bloodGroupComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Blood Group" }));
        jPanel1.add(bloodGroupComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 200, 290, 30));
        jPanel1.add(fatherNameTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 130, 270, 30));
        jPanel1.add(contactTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 130, 270, 30));

        addressTextArea.setColumns(20);
        addressTextArea.setRows(5);
        jScrollPane2.setViewportView(addressTextArea);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 190, 270, -1));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 0));
        jLabel8.setText("Gender : ");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 200, -1, 27));

        backButton.setBackground(new java.awt.Color(153, 0, 0));
        backButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/back.png"))); // NOI18N
        backButton.setText("Back");
        backButton.setBorder(null);
        backButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backButtonMouseMoved(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 170, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1320, 630));

        jPanel3.setBackground(new java.awt.Color(153, 0, 0));
        jPanel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel3MouseMoved(evt);
            }
        });
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addButton.setBackground(new java.awt.Color(255, 255, 255));
        addButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/add.png"))); // NOI18N
        addButton.setText("Add Record");
        addButton.setBorder(null);
        addButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addButtonMouseMoved(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel3.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 250, 50));

        deleteButton.setBackground(new java.awt.Color(255, 255, 255));
        deleteButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/trash.png"))); // NOI18N
        deleteButton.setText("Delete Record");
        deleteButton.setBorder(null);
        deleteButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                deleteButtonMouseMoved(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel3.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 40, 250, 50));

        updateButton.setBackground(new java.awt.Color(255, 255, 255));
        updateButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/update.png"))); // NOI18N
        updateButton.setText("Update Record");
        updateButton.setBorder(null);
        updateButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                updateButtonMouseMoved(evt);
            }
        });
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel3.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, 250, 50));

        clearFieldsButton.setBackground(new java.awt.Color(255, 255, 255));
        clearFieldsButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        clearFieldsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/clearFields.png"))); // NOI18N
        clearFieldsButton.setText("Clear All Fields");
        clearFieldsButton.setBorder(null);
        clearFieldsButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                clearFieldsButtonMouseMoved(evt);
            }
        });
        clearFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsButtonActionPerformed(evt);
            }
        });
        jPanel3.add(clearFieldsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 40, 250, 50));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 630, 1320, 120));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void patientTableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientTableMouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(resetColor());
    }//GEN-LAST:event_patientTableMouseMoved

    private void patientTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientTableMouseClicked
        patientId = (Integer) patientTable.getValueAt(patientTable.getSelectedRow(), 0);
        PatientModel patientModel = new PatientDAOImpl().getPatientById(patientId);
        patientNameTextfield.setText(patientModel.getName());
        fatherNameTextfield.setText(patientModel.getFatherName());
        contactTextfield.setText(patientModel.getContact());
        addressTextArea.setText(patientModel.getAddress());
        bloodGroupComboBox.setSelectedItem(patientModel.getBloodGroupModel().getBloodGroup());
        genderComboBox.setSelectedItem(patientModel.getGender());
        setButtons();
    }//GEN-LAST:event_patientTableMouseClicked

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void updateButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseMoved
        if (updateButton.isEnabled()) {
            updateButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_updateButtonMouseMoved

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed

        if (bloodGroupComboBox.getSelectedItem().toString().equals("Select Blood Group")) {
            JOptionPane.showMessageDialog(this, "Please select a blood group to update record.");
        } else if (patientNameTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill patient name field to update record.");
        } else if (genderComboBox.getSelectedItem().toString().equals("Select Gender")) {
            JOptionPane.showMessageDialog(this, "Please select gender to update record.");
        } else if (fatherNameTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please add father name to update record.");
        } else if (contactTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please add contact no to update record.");
        } else if (addressTextArea.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill address field to update record.");
        } else {
            String bloodGroup = bloodGroupComboBox.getSelectedItem().toString();
            String gender = genderComboBox.getSelectedItem().toString();
            String patientName = patientNameTextfield.getText();
            String fatherName = fatherNameTextfield.getText();
            String contact = contactTextfield.getText();
            String address = addressTextArea.getText();
            currentDate = new Timestamp(System.currentTimeMillis());
            BloodGroupModel bloodGroupModel = new BloodGroupDAOImpl().getBloodGroupByName(bloodGroup);
            PatientModel patientModel = new PatientModel();
            patientModel.setAddress(address);
            patientModel.setBloodGroupModel(bloodGroupModel);
            patientModel.setContact(contact);
            patientModel.setFatherName(fatherName);
            patientModel.setGender(gender);
            patientModel.setName(patientName);
            patientModel.setPatientId(patientId);
            patientModel.setModifiedBy(2);
            patientModel.setModifiedDate(currentDate);
            PatientDAOImpl patientDAOImpl = new PatientDAOImpl();
            int result = patientDAOImpl.updatePatient(patientModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been successfully updated.");
                fillPatientTable();
            } else {
                JOptionPane.showMessageDialog(this, " record could not be updated,try again.");
            }
            clearAllFields();
            resetAddButton();
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void addButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseMoved
        if (addButton.isEnabled()) {
            addButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_addButtonMouseMoved

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        if (bloodGroupComboBox.getSelectedItem().toString().equals("Select Blood Group")) {
            JOptionPane.showMessageDialog(this, "Please select a blood group to add record.");
        } else if (patientNameTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill patient name field to add record.");
        } else if (genderComboBox.getSelectedItem().toString().equals("Select Gender")) {
            JOptionPane.showMessageDialog(this, "Please select gender to add record.");
        } else if (fatherNameTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please add father name to add record.");
        } else if (contactTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please add contact no to add record.");
        } else if (addressTextArea.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill address field to add record.");
        } else {
            String bloodGroup = bloodGroupComboBox.getSelectedItem().toString();
            String gender = genderComboBox.getSelectedItem().toString();
            String patientName = patientNameTextfield.getText();
            String fatherName = fatherNameTextfield.getText();
            String contact = contactTextfield.getText();
            String address = addressTextArea.getText();
            currentDate = new Timestamp(System.currentTimeMillis());
            BloodGroupModel bloodGroupModel = new BloodGroupDAOImpl().getBloodGroupByName(bloodGroup);
            PatientModel patientModel = new PatientModel();
            patientModel.setAddress(address);
            patientModel.setBloodGroupModel(bloodGroupModel);
            patientModel.setContact(contact);
            patientModel.setFatherName(fatherName);
            patientModel.setGender(gender);
            patientModel.setName(patientName);
            patientModel.setCreatedBy(1);
            patientModel.setCreatedDate(currentDate);
            patientModel.setModifiedBy(1);
            patientModel.setModifiedDate(currentDate);
            PatientDAOImpl patientDAOImpl = new PatientDAOImpl();
            int result = patientDAOImpl.addPatient(patientModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been successfully added.");
                fillPatientTable();
            } else {
                JOptionPane.showMessageDialog(this, " record could not be added,try again.");
            }
            clearAllFields();
            resetAddButton();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void clearFieldsButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFieldsButtonMouseMoved
        if (clearFieldsButton.isEnabled()) {
            clearFieldsButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_clearFieldsButtonMouseMoved

    private void clearFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsButtonActionPerformed
        clearAllFields();
    }//GEN-LAST:event_clearFieldsButtonActionPerformed

    private void backButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseMoved
        if (backButton.isEnabled()) {
            backButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_backButtonMouseMoved

    private void deleteButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseMoved
        if (deleteButton.isEnabled()) {
            deleteButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_deleteButtonMouseMoved

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        PatientModel patientModel = new PatientModel();
        patientModel.setModifiedBy(2);
        patientModel.setModifiedDate(currentDate);
        patientModel.setPatientId(patientId);
        PatientDAOImpl patientDAOImpl = new PatientDAOImpl();
        int result = patientDAOImpl.deletePatientById(patientModel);
        if (result > 0) {
            JOptionPane.showMessageDialog(this, result + " record has been successfully deleted.");
            fillPatientTable();
        } else {
            JOptionPane.showMessageDialog(this, " record could not be deleted,try again.");
        }
        clearAllFields();
        resetAddButton();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void jPanel3MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel3MouseMoved

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel3MouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new MainMenuFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientsFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextArea addressTextArea;
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> bloodGroupComboBox;
    private javax.swing.JButton clearFieldsButton;
    private javax.swing.JTextField contactTextfield;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField fatherNameTextfield;
    private javax.swing.JComboBox<String> genderComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField patientNameTextfield;
    private javax.swing.JTable patientTable;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    private void fillBloodGroupComboBox() {

        ResultSet resultSet = new BloodGroupDAOImpl().getAllBloodGroups();
        try {
            while (resultSet.next()) {
                bloodGroupComboBox.addItem(resultSet.getString("Blood Group"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillPatientTable() {
        ResultSet resultSet = new PatientDAOImpl().getAllPatients();
        patientTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }

    private void clearAllFields() {
        patientNameTextfield.setText("");
        fatherNameTextfield.setText("");
        genderComboBox.setSelectedIndex(0);
        bloodGroupComboBox.setSelectedIndex(0);
        addressTextArea.setText("");
        contactTextfield.setText("");
        contactTextfield.setText("");
        patientTable.clearSelection();
        resetAddButton();
    }

    private Color resetColor() {
        return Color.BLACK;
    }

    public void setButtons() {
        addButton.setEnabled(false);
        updateButton.setEnabled(true);
        deleteButton.setEnabled(true);
    }

    private void resetAddButton() {
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }
    
    private void checkPermissions() {
        ResultSet assignedPermissions = new UserPermissionDAOImpl().getAssignedPermissions(LoginFrame.userType); 
        try {
            while(assignedPermissions.next())
            {
                PermissionModel permissionModel = new PermissionModel();
                permissionModel.setPermission(assignedPermissions.getString("Permission"));
                
                if(permissionModel.getPermission().equals("ADD_PATIENT"))
                {
                    addButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("DELETE_PATIENT"))
                {
                    deleteButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("UPDATE_PATIENT"))
                {
                    updateButton.setVisible(true);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainMenuFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
