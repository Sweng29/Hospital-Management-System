/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ehealthpro.frames;

import com.sun.glass.events.KeyEvent;
import ehealthpro.daoimpls.BloodGroupDAOImpl;
import ehealthpro.daoimpls.EmployeeDAOImpl;
import ehealthpro.daoimpls.EmployeeTypeDAOImpl;
import ehealthpro.daoimpls.ShiftingDAOImpl;
import ehealthpro.daoimpls.SpecializationDAOImpl;
import ehealthpro.daoimpls.UserPermissionDAOImpl;
import ehealthpro.models.BloodGroupModel;
import ehealthpro.models.EmployeeModel;
import ehealthpro.models.EmployeeTypeModel;
import ehealthpro.models.PermissionModel;
import ehealthpro.models.ShiftingModel;
import ehealthpro.models.SpecializationModel;
import java.awt.Color;
import java.util.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author sweng
 */
public class EmployeeFrame extends javax.swing.JFrame {

    /**
     * Creates new form EmployeeNewFrame
     */
    Integer employeeId;
    Timestamp currentDate = new Timestamp(System.currentTimeMillis());
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    static EmployeeFrame employeeNewFrame=null;
    public EmployeeFrame() {
        initComponents();
        this.setTitle("Employee || E-Health Pro");
        fillSpecializationComboBox();
        fillShiftingComboBox();
        fillEmployeeTypeComboBox();
        fillBloodGroupComboBox();
        fillEmployeeTable();
        addButton.setVisible(false);
        updateButton.setVisible(false);
        deleteButton.setVisible(false);
        resetAddButton();
        checkPermissions();
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nameTextfield = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cnicTextfield = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        genderComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        salaryTextfield = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        employeeTypeComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        contactTextfield = new javax.swing.JTextField();
        feesTextfield = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        shiftComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        bloodGroupComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        addressTextArea = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        specializationComboBox = new javax.swing.JComboBox<>();
        dateOfBirthChooser = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearFieldsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setToolTipText("");
        jPanel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("Name :");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 80, 36));

        nameTextfield.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nameTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameTextfieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameTextfieldKeyTyped(evt);
            }
        });
        jPanel1.add(nameTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 120, 270, 30));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 0));
        jLabel6.setText("CNIC No :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 120, -1, 34));

        cnicTextfield.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cnicTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cnicTextfieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cnicTextfieldKeyTyped(evt);
            }
        });
        jPanel1.add(cnicTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 120, 260, 30));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("Gender :");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 90, 30));

        genderComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        genderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Gender", "Male", "Female" }));
        genderComboBox.setToolTipText("Select gender");
        genderComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        genderComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.add(genderComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, 270, 30));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setText("Date of Birth :");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 180, -1, 30));

        salaryTextfield.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        salaryTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                salaryTextfieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                salaryTextfieldKeyTyped(evt);
            }
        });
        jPanel1.add(salaryTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 120, 260, 30));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 0));
        jLabel8.setText("Salary :");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 120, 86, 29));

        employeeTypeComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        employeeTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Employee Type" }));
        employeeTypeComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(employeeTypeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 230, 260, 32));

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 0, 0));
        jLabel11.setText("Employee Type :");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 230, -1, 30));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 0, 0));
        jLabel5.setText("Contact :");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 170, 100, 30));

        contactTextfield.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        contactTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                contactTextfieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                contactTextfieldKeyTyped(evt);
            }
        });
        jPanel1.add(contactTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 170, 260, 30));

        feesTextfield.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        feesTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                feesTextfieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                feesTextfieldKeyTyped(evt);
            }
        });
        jPanel1.add(feesTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 220, 260, 30));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 0, 0));
        jLabel9.setText("Fees :");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 217, 50, 30));

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("Employee Details");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, 360, 60));

        jLabel12.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(153, 0, 0));
        jLabel12.setText("Shift : ");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 230, 60, 30));

        shiftComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        shiftComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Shift" }));
        shiftComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(shiftComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, 270, 30));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 0, 0));
        jLabel10.setText("Blood Group :");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, -1, 30));

        bloodGroupComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bloodGroupComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Blood Group" }));
        bloodGroupComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(bloodGroupComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 290, 270, 30));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("Address :");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 280, 90, 33));

        addressTextArea.setColumns(20);
        addressTextArea.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addressTextArea.setRows(5);
        addressTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                addressTextAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(addressTextArea);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 280, 270, 80));

        jLabel13.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 0, 0));
        jLabel13.setText("Specialization :");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 290, -1, 32));

        specializationComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        specializationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Specialization" }));
        specializationComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(specializationComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 290, 260, 33));

        dateOfBirthChooser.setDateFormatString("yyyy-MM-dd HH:mm:ss");
        jPanel1.add(dateOfBirthChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 180, 260, 29));

        employeeTable.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        employeeTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                employeeTableMouseMoved(evt);
            }
        });
        employeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(employeeTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 1340, 230));

        jLabel14.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(153, 0, 0));
        jLabel14.setText("Employee Record :");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, -1, -1));

        backButton.setBackground(new java.awt.Color(153, 0, 0));
        backButton.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/back.png"))); // NOI18N
        backButton.setText("Back");
        backButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        backButton.setContentAreaFilled(false);
        backButton.setOpaque(true);
        backButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backButtonMouseMoved(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 150, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 630));

        jPanel2.setBackground(new java.awt.Color(153, 0, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel2MouseMoved(evt);
            }
        });
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addButton.setBackground(new java.awt.Color(255, 255, 255));
        addButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/add user.png"))); // NOI18N
        addButton.setText("Add Employee");
        addButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addButton.setContentAreaFilled(false);
        addButton.setOpaque(true);
        addButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addButtonMouseMoved(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel2.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 220, 39));

        updateButton.setBackground(new java.awt.Color(255, 255, 255));
        updateButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/update.png"))); // NOI18N
        updateButton.setText("Update Employee");
        updateButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateButton.setContentAreaFilled(false);
        updateButton.setOpaque(true);
        updateButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                updateButtonMouseMoved(evt);
            }
        });
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel2.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 230, 40));

        deleteButton.setBackground(new java.awt.Color(255, 255, 255));
        deleteButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/trash.png"))); // NOI18N
        deleteButton.setText("Delete Employee");
        deleteButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteButton.setContentAreaFilled(false);
        deleteButton.setOpaque(true);
        deleteButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                deleteButtonMouseMoved(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel2.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 30, 250, 41));

        clearFieldsButton.setBackground(new java.awt.Color(255, 255, 255));
        clearFieldsButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        clearFieldsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/clearFields.png"))); // NOI18N
        clearFieldsButton.setText("Clear All Fields");
        clearFieldsButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        clearFieldsButton.setContentAreaFilled(false);
        clearFieldsButton.setOpaque(true);
        clearFieldsButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                clearFieldsButtonMouseMoved(evt);
            }
        });
        clearFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsButtonActionPerformed(evt);
            }
        });
        jPanel2.add(clearFieldsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 30, 240, 39));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 630, 1370, 110));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String name = nameTextfield.getText();
        Timestamp dateOfBirth = Timestamp.valueOf(sdf.format(dateOfBirthChooser.getDate()));
        String cnicNo = cnicTextfield.getText();
        Integer salary = Integer.parseInt(salaryTextfield.getText());
        String contact = contactTextfield.getText();
        Integer fees = Integer.parseInt(feesTextfield.getText());
        String address = addressTextArea.getText();
        String gender = genderComboBox.getSelectedItem().toString();
        if(name.equals("") || dateOfBirth.equals("") || cnicNo.equals("") || salary.equals("") || contact.equals("") ||
                fees.equals("") ||address.equals("") ||gender.equals("Select Gender") || employeeTypeComboBox.getSelectedItem().toString().equals("Select Employee Type")
                || shiftComboBox.getSelectedItem().toString().equals("Select Shift") || specializationComboBox.getSelectedItem().toString().equals("Select Specialization")
                || bloodGroupComboBox.getSelectedItem().toString().equals("Select Blood Group"))
        {
            JOptionPane.showMessageDialog(this, "Please fill complete data to add record");
        }else{
        String employeeType = employeeTypeComboBox.getSelectedItem().toString();
        EmployeeTypeModel employeeTypeModel = new EmployeeTypeDAOImpl().getEmployeeTypeByName(employeeType);
        ShiftingModel shiftingModel = new ShiftingDAOImpl().getShiftingByName(shiftComboBox.getSelectedItem().toString());
        SpecializationModel specializationModel = new SpecializationDAOImpl().getSpecializationByName(specializationComboBox.getSelectedItem().toString());
        BloodGroupModel bloodGroupModel = new BloodGroupDAOImpl().getBloodGroupByName(bloodGroupComboBox.getSelectedItem().toString());
        EmployeeModel employeeModel = new EmployeeModel();
        employeeModel.setAddress(address);
        employeeModel.setBloodGroupModel(bloodGroupModel);
        employeeModel.setCnic(cnicNo);
        employeeModel.setContact(contact);
        employeeModel.setCreatedBy(1);
        employeeModel.setCreatedDate(currentDate);
        employeeModel.setDateOfBirth(dateOfBirth);
        employeeModel.setEmployeeTypeModel(employeeTypeModel);
        employeeModel.setFees(fees);
        employeeModel.setSpecializationModel(specializationModel);
        employeeModel.setGender(gender);
        employeeModel.setModifiedBy(1);
        employeeModel.setModifiedDate(currentDate);
        employeeModel.setName(name);
        employeeModel.setSalary(salary);
        employeeModel.setShiftModel(shiftingModel);
        int result = new EmployeeDAOImpl().addEmployee(employeeModel);
        if(result>0)
        {
            JOptionPane.showMessageDialog(this, result+" record has been added successfully.");
        }else{
            JOptionPane.showMessageDialog(this, " Could not add record,try again.");
        }
        clearAllFields();
        resetAddButton();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        EmployeeModel employeeModel = new EmployeeModel();
        employeeModel.setModifiedBy(1);
        employeeModel.setModifiedDate(currentDate);
        employeeModel.setEmployeeId(employeeId);
        int result = new EmployeeDAOImpl().deleteEmployeeById(employeeModel);
        if(result>0)
        {
            JOptionPane.showMessageDialog(this, result+" record has been deleted successfully.");
            fillEmployeeTable();
        }else{
            JOptionPane.showMessageDialog(this, " Could not delete record,try again.");
        }
        clearAllFields();
        resetAddButton();        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void nameTextfieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextfieldKeyReleased
        if(nameTextfield.getText().equals(""))
        {
            resetAddButton();
            clearAllFields();
        }
    }//GEN-LAST:event_nameTextfieldKeyReleased

    private void cnicTextfieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cnicTextfieldKeyReleased
        if(cnicTextfield.getText().equals(""))
        {
            resetAddButton();
            clearAllFields();
        }
    }//GEN-LAST:event_cnicTextfieldKeyReleased

    private void salaryTextfieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_salaryTextfieldKeyReleased
        if(salaryTextfield.getText().equals(""))
        {
            resetAddButton();
            clearAllFields();
        }
    }//GEN-LAST:event_salaryTextfieldKeyReleased

    private void contactTextfieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contactTextfieldKeyReleased
        if(contactTextfield.getText().equals(""))
        {
            resetAddButton();
            clearAllFields();
        }
    }//GEN-LAST:event_contactTextfieldKeyReleased

    private void feesTextfieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_feesTextfieldKeyReleased
       if(feesTextfield.getText().equals(""))
        {
            resetAddButton();
            clearAllFields();
        }
    }//GEN-LAST:event_feesTextfieldKeyReleased

    private void addressTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressTextAreaKeyReleased
        if(addressTextArea.getText().equals(""))
        {
            resetAddButton();
            clearAllFields();
        }
    }//GEN-LAST:event_addressTextAreaKeyReleased

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        String name = nameTextfield.getText();
        Timestamp dateOfBirth = Timestamp.valueOf(sdf.format(dateOfBirthChooser.getDate()));
        String cnicNo = cnicTextfield.getText();
        Integer salary = Integer.parseInt(salaryTextfield.getText());
        String contact = contactTextfield.getText();
        Integer fees = Integer.parseInt(feesTextfield.getText());
        String address = addressTextArea.getText();
        String gender = genderComboBox.getSelectedItem().toString();
        if(name.equals("") || dateOfBirth.equals("") || cnicNo.equals("") || salary.equals("") || contact.equals("") ||
                fees.equals("") ||address.equals("") ||gender.equals("Select Gender") || employeeTypeComboBox.getSelectedItem().toString().equals("Select Employee Type")
                || shiftComboBox.getSelectedItem().toString().equals("Select Shift") || specializationComboBox.getSelectedItem().toString().equals("Select Specialization")
                || bloodGroupComboBox.getSelectedItem().toString().equals("Select Blood Group"))
        {
            JOptionPane.showMessageDialog(this, "Please fill complete data to update record");
        }else{
        String employeeType = employeeTypeComboBox.getSelectedItem().toString();
        EmployeeTypeModel employeeTypeModel = new EmployeeTypeDAOImpl().getEmployeeTypeByName(employeeType);
        ShiftingModel shiftingModel = new ShiftingDAOImpl().getShiftingByName(shiftComboBox.getSelectedItem().toString());
        SpecializationModel specializationModel = new SpecializationDAOImpl().getSpecializationByName(specializationComboBox.getSelectedItem().toString());
        BloodGroupModel bloodGroupModel = new BloodGroupDAOImpl().getBloodGroupByName(bloodGroupComboBox.getSelectedItem().toString());
        EmployeeModel employeeModel = new EmployeeModel();
        employeeModel.setAddress(address);
        employeeModel.setBloodGroupModel(bloodGroupModel);
        employeeModel.setCnic(cnicNo);
        employeeModel.setContact(contact);
        employeeModel.setDateOfBirth(dateOfBirth);
        employeeModel.setEmployeeTypeModel(employeeTypeModel);
        employeeModel.setFees(fees);
        employeeModel.setSpecializationModel(specializationModel);
        employeeModel.setGender(gender);
        employeeModel.setModifiedBy(2);
        employeeModel.setModifiedDate(currentDate);
        employeeModel.setName(name);
        employeeModel.setSalary(salary);
        employeeModel.setShiftModel(shiftingModel);
        employeeModel.setEmployeeId(employeeId);
        int result = new EmployeeDAOImpl().updateEmployee(employeeModel);
        if(result>0)
        {
            JOptionPane.showMessageDialog(this, result+" record has been updated successfully.");
            fillEmployeeTable();
        }else{
            JOptionPane.showMessageDialog(this, " Could not update record,try again.");
        }
        clearAllFields();
        resetAddButton();
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
         clearAllFields();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void clearFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsButtonActionPerformed
         clearAllFields();
    }//GEN-LAST:event_clearFieldsButtonActionPerformed

    private void addButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseMoved
        if (addButton.isEnabled()) {
            addButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_addButtonMouseMoved

    private void jPanel2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel2MouseMoved

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);  
    }//GEN-LAST:event_jPanel1MouseMoved

    private void updateButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseMoved
        if (updateButton.isEnabled()) {
            updateButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_updateButtonMouseMoved

    private void deleteButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseMoved
        if (deleteButton.isEnabled()) {
            deleteButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_deleteButtonMouseMoved

    private void clearFieldsButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFieldsButtonMouseMoved
        if (clearFieldsButton.isEnabled()) {
            clearFieldsButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_clearFieldsButtonMouseMoved

    private void backButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseMoved
        if (backButton.isEnabled()) {
            backButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_backButtonMouseMoved

    private void cnicTextfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cnicTextfieldKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACKSPACE) || (c==KeyEvent.VK_DELETE) || (c==KeyEvent.VK_MINUS)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_cnicTextfieldKeyTyped

    private void nameTextfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextfieldKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isLetter(c) || (c==KeyEvent.VK_BACKSPACE) || (c==KeyEvent.VK_DELETE) || (c==KeyEvent.VK_SPACE)))
        {
            evt.consume();
        }        
    }//GEN-LAST:event_nameTextfieldKeyTyped

    private void salaryTextfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_salaryTextfieldKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACKSPACE) || (c==KeyEvent.VK_DELETE)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_salaryTextfieldKeyTyped

    private void contactTextfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contactTextfieldKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACKSPACE) || (c==KeyEvent.VK_DELETE)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_contactTextfieldKeyTyped

    private void feesTextfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_feesTextfieldKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACKSPACE) || (c==KeyEvent.VK_DELETE)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_feesTextfieldKeyTyped

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new MainMenuFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void employeeTableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeTableMouseMoved
        
    }//GEN-LAST:event_employeeTableMouseMoved

    private void employeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeTableMouseClicked
        employeeId = (Integer) employeeTable.getValueAt(employeeTable.getSelectedRow(), 0);
        EmployeeModel employeeModel = new EmployeeDAOImpl().getEmployeeById(employeeId);
        nameTextfield.setText(employeeModel.getName());
        dateOfBirthChooser.setDate(employeeModel.getDateOfBirth());
        cnicTextfield.setText(employeeModel.getCnic());
        salaryTextfield.setText(employeeModel.getSalary().toString());
        contactTextfield.setText(employeeModel.getContact());
        feesTextfield.setText(employeeModel.getFees().toString());
        addressTextArea.setText(employeeModel.getAddress());
        genderComboBox.setSelectedItem(employeeModel.getGender());
        employeeTypeComboBox.setSelectedItem(employeeModel.getEmployeeTypeModel().getEmployeeType());
        shiftComboBox.setSelectedItem(employeeModel.getShiftModel().getShift());
        bloodGroupComboBox.setSelectedItem(employeeModel.getBloodGroupModel().getBloodGroup());
        specializationComboBox.setSelectedItem(employeeModel.getSpecializationModel().getName());
        employeeId = employeeModel.getEmployeeId();
        setButtons();
    }//GEN-LAST:event_employeeTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextArea addressTextArea;
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> bloodGroupComboBox;
    private javax.swing.JButton clearFieldsButton;
    private javax.swing.JTextField cnicTextfield;
    private javax.swing.JTextField contactTextfield;
    private com.toedter.calendar.JDateChooser dateOfBirthChooser;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTable employeeTable;
    private javax.swing.JComboBox<String> employeeTypeComboBox;
    private javax.swing.JTextField feesTextfield;
    private javax.swing.JComboBox<String> genderComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameTextfield;
    private javax.swing.JTextField salaryTextfield;
    private javax.swing.JComboBox<String> shiftComboBox;
    private javax.swing.JComboBox<String> specializationComboBox;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

        
     private void clearAllFields() {
        nameTextfield.setText("");
        dateOfBirthChooser.setDate(null);
        genderComboBox.setSelectedIndex(0);
        employeeTypeComboBox.setSelectedIndex(0);
        shiftComboBox.setSelectedIndex(0);
        bloodGroupComboBox.setSelectedIndex(0);
        specializationComboBox.setSelectedIndex(0);
        addressTextArea.setText("");
        cnicTextfield.setText("");
        salaryTextfield.setText("");
        contactTextfield.setText("");
        feesTextfield.setText("");
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }
    private Color resetColor()
    {
        return Color.BLACK;
    }
    
    public void setButtons() {
        addButton.setEnabled(false);
        updateButton.setEnabled(true);
        deleteButton.setEnabled(true);
    }
    private void resetAddButton()
    {
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }

    private void fillEmployeeTypeComboBox() {
       ResultSet resultSet = new EmployeeTypeDAOImpl().getAllEmployeeTypes();
       try{
         while(resultSet.next())
            {
                employeeTypeComboBox.addItem(resultSet.getString("Employee Name"));
            }       
       }catch(Exception e)
       {
           e.printStackTrace();
       }
        
    }

    private void fillShiftingComboBox() {
    
       ResultSet resultSet = new ShiftingDAOImpl().getAllShifting();
       try{
         while(resultSet.next())
            {
                shiftComboBox.addItem(resultSet.getString("Shif Name"));
            }       
       }catch(Exception e)
       {
           e.printStackTrace();
       }
    }

    private void fillSpecializationComboBox() {
    
       ResultSet resultSet = new SpecializationDAOImpl().getAllSpecializations();
       try{
         while(resultSet.next())
            {
                specializationComboBox.addItem(resultSet.getString("Specialization"));
            }       
       }catch(Exception e)
       {
           e.printStackTrace();
       }
        
    }

    private void fillBloodGroupComboBox() {
    
       ResultSet resultSet = new BloodGroupDAOImpl().getAllBloodGroups();
       try{
         while(resultSet.next())
            {
                bloodGroupComboBox.addItem(resultSet.getString("Blood Group"));
            }       
       }catch(Exception e)
       {
           e.printStackTrace();
       }
    
    }
    public static EmployeeFrame getEmployeeObject()
    {
        if(employeeNewFrame==null)
        {
            employeeNewFrame = new EmployeeFrame();
        }
        return employeeNewFrame;
    }
    
    private void checkPermissions() {
        ResultSet assignedPermissions = new UserPermissionDAOImpl().getAssignedPermissions(LoginFrame.userType); 
        try {
            while(assignedPermissions.next())
            {
                PermissionModel permissionModel = new PermissionModel();
                permissionModel.setPermission(assignedPermissions.getString("Permission"));
                
                if(permissionModel.getPermission().equals("ADD_EMPLOYEE"))
                {
                    addButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("DELETE_EMPLOYEE"))
                {
                    deleteButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("UPDATE_EMPLOYEE"))
                {
                    updateButton.setVisible(true);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainMenuFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void fillEmployeeTable() {
       ResultSet resultSet = new EmployeeDAOImpl().getAllEmployees();
       employeeTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }
}
