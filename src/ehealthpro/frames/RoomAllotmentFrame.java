/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ehealthpro.frames;

import ehealthpro.daoimpls.AppointmentDAOImpl;
import ehealthpro.daoimpls.RoomAllotmentDAOImpl;
import ehealthpro.daoimpls.RoomDetailDAOImpl;
import ehealthpro.daoimpls.UserPermissionDAOImpl;
import static ehealthpro.frames.PatientTestFrame.patientName;
import ehealthpro.models.AppointmentModel;
import ehealthpro.models.PermissionModel;
import ehealthpro.models.RoomAllotmentModel;
import ehealthpro.models.RoomDetailModel;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author sweng
 */
public class RoomAllotmentFrame extends javax.swing.JFrame {

    /**
     * Creates new form RoomAllotmentFrame
     */
    Integer roomAllotmentId;
    Timestamp currentDate = new Timestamp(System.currentTimeMillis());
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    Integer appointmentId;
    static String patientName = "";
    public RoomAllotmentFrame() {
        initComponents();
        fillRoomAllotmentTable();
        fillRoomNoComboBox();
        fillAppointmentTable();
        this.setTitle("Room Allotment || E-Health Pro");
        this.setResizable(false);
        disableComponents();
        checkPermissions();
        resetAddButton();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        statusComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        roomNoComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        allotmentDateChooser = new com.toedter.calendar.JDateChooser();
        dischargeDateChooser = new com.toedter.calendar.JDateChooser();
        appointmentTextfield = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        roomAllotmentTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearFieldsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setToolTipText("");
        jPanel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("Allotment Date :");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 150, 36));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("Status :");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 110, 90, 30));

        statusComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        statusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Status", "Discharged", "Living" }));
        statusComboBox.setToolTipText("Select gender");
        statusComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.add(statusComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 110, 270, 30));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setText("Discharge Date :");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 150, 33));

        roomNoComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        roomNoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Room No" }));
        roomNoComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        roomNoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNoComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(roomNoComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 160, 270, 32));

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 0, 0));
        jLabel11.setText("Room No :");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 150, -1, 36));

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("Room Allotment");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, 350, 70));

        jLabel12.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(153, 0, 0));
        jLabel12.setText("Appointment By :");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 110, 160, 30));

        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        appointmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(appointmentTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, 1360, 140));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 0, 0));
        jLabel5.setText("Appointment Record :");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, -1, -1));

        allotmentDateChooser.setDateFormatString("yyyy-MM-dd HH:mm:ss");
        jPanel1.add(allotmentDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, 290, 30));

        dischargeDateChooser.setDateFormatString("yyyy-MM-dd HH:mm:ss");
        jPanel1.add(dischargeDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 160, 290, 30));
        jPanel1.add(appointmentTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 110, 280, 30));

        roomAllotmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        roomAllotmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomAllotmentTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(roomAllotmentTable);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 1360, 160));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 0));
        jLabel6.setText("Room Allotment Record :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        backButton.setBackground(new java.awt.Color(153, 0, 0));
        backButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/back.png"))); // NOI18N
        backButton.setText("Back");
        backButton.setBorder(null);
        backButton.setContentAreaFilled(false);
        backButton.setOpaque(true);
        backButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backButtonMouseMoved(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 160, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 600));

        jPanel2.setBackground(new java.awt.Color(153, 0, 0));
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel2MouseMoved(evt);
            }
        });
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addButton.setBackground(new java.awt.Color(255, 255, 255));
        addButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/add.png"))); // NOI18N
        addButton.setText("Add Record");
        addButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addButton.setContentAreaFilled(false);
        addButton.setOpaque(true);
        addButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addButtonMouseMoved(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel2.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 200, 50));

        updateButton.setBackground(new java.awt.Color(255, 255, 255));
        updateButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/update.png"))); // NOI18N
        updateButton.setText("Update Record");
        updateButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateButton.setContentAreaFilled(false);
        updateButton.setOpaque(true);
        updateButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                updateButtonMouseMoved(evt);
            }
        });
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel2.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 210, 50));

        deleteButton.setBackground(new java.awt.Color(255, 255, 255));
        deleteButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/trash.png"))); // NOI18N
        deleteButton.setText("Delete Record");
        deleteButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteButton.setContentAreaFilled(false);
        deleteButton.setOpaque(true);
        deleteButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                deleteButtonMouseMoved(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel2.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 30, 220, 50));

        clearFieldsButton.setBackground(new java.awt.Color(255, 255, 255));
        clearFieldsButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        clearFieldsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/clearFields.png"))); // NOI18N
        clearFieldsButton.setText("Clear All Fields");
        clearFieldsButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        clearFieldsButton.setContentAreaFilled(false);
        clearFieldsButton.setOpaque(true);
        clearFieldsButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                clearFieldsButtonMouseMoved(evt);
            }
        });
        clearFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsButtonActionPerformed(evt);
            }
        });
        jPanel2.add(clearFieldsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 30, 210, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 590, 1400, 110));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void addButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseMoved
        if (addButton.isEnabled()) {
            addButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_addButtonMouseMoved

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (allotmentDateChooser.getDate().equals("")) {
            JOptionPane.showMessageDialog(this, "Please insert allotment Date to add record.");
        } else if (dischargeDateChooser.getDate().equals("")) {
            JOptionPane.showMessageDialog(this, "Please insert discharge Date to add record.");
        } else if (statusComboBox.getSelectedItem().toString().equals("Select Status")) {
            JOptionPane.showMessageDialog(this, "Please select status to add record.");
        } else if (appointmentTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select appointment by from appointment table to add record.");
        } else if (roomNoComboBox.getSelectedItem().toString().equals("Select Room No")) {
            JOptionPane.showMessageDialog(this, "Please select room number to add record.");
        } else {
            Timestamp allotmentDate = Timestamp.valueOf(sdf.format(allotmentDateChooser.getDate()));
            Timestamp dischargeDate = Timestamp.valueOf(sdf.format(dischargeDateChooser.getDate()));
            String status = statusComboBox.getSelectedItem().toString();
            String roomNo = roomNoComboBox.getSelectedItem().toString();
            RoomDetailModel roomDetailModel = new RoomDetailDAOImpl().getRoomDetailByName(roomNo);
            AppointmentModel appointmentModel = new AppointmentDAOImpl().getAppointmentById(appointmentId);
            RoomAllotmentModel roomAllotmentModel = new RoomAllotmentModel();
            roomAllotmentModel.setAllotmentDate(allotmentDate);
            roomAllotmentModel.setAppointmentModel(appointmentModel);
            roomAllotmentModel.setCreatedBy(1);
            roomAllotmentModel.setCreatedDate(currentDate);
            roomAllotmentModel.setDischargeDate(dischargeDate);
            roomAllotmentModel.setModifiedBy(1);
            roomAllotmentModel.setModifiedDate(currentDate);
            roomAllotmentModel.setRoomDetailModel(roomDetailModel);
            roomAllotmentModel.setStatus(status);
            int result = new RoomAllotmentDAOImpl().addRoomAllotment(roomAllotmentModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been added successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Could not add record,try again.");
            }
            clearAllFields();
            fillRoomAllotmentTable();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseMoved
        if (updateButton.isEnabled()) {
            updateButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_updateButtonMouseMoved

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (allotmentDateChooser.getDate().equals("")) {
            JOptionPane.showMessageDialog(this, "Please insert allotment Date to update record.");
        } else if (dischargeDateChooser.getDate().equals("")) {
            JOptionPane.showMessageDialog(this, "Please insert discharge Date to update record.");
        } else if (statusComboBox.getSelectedItem().toString().equals("Select Status")) {
            JOptionPane.showMessageDialog(this, "Please select status to update record.");
        } else if (appointmentTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select appointment by to update record.");
        } else if (roomNoComboBox.getSelectedItem().toString().equals("Select Room No")) {
            JOptionPane.showMessageDialog(this, "Please select room number to update record.");
        } else {
            Timestamp allotmentDate = Timestamp.valueOf(sdf.format(allotmentDateChooser.getDate()));
            Timestamp dischargeDate = Timestamp.valueOf(sdf.format(dischargeDateChooser.getDate()));
            String status = statusComboBox.getSelectedItem().toString();
            String roomNo = roomNoComboBox.getSelectedItem().toString();
            RoomDetailModel roomDetailModel = new RoomDetailDAOImpl().getRoomDetailByName(roomNo);
            AppointmentModel appointmentModel = new AppointmentDAOImpl().getAppointmentById(appointmentId);
            RoomAllotmentModel roomAllotmentModel = new RoomAllotmentModel();
            roomAllotmentModel.setAllotmentDate(allotmentDate);
            roomAllotmentModel.setAppointmentModel(appointmentModel);
            roomAllotmentModel.setDischargeDate(dischargeDate);
            roomAllotmentModel.setModifiedBy(1);
            roomAllotmentModel.setModifiedDate(currentDate);
            roomAllotmentModel.setRoomDetailModel(roomDetailModel);
            roomAllotmentModel.setStatus(status);
            roomAllotmentModel.setAllotmentId(roomAllotmentId);
            int result = new RoomAllotmentDAOImpl().updateRoomAllotment(roomAllotmentModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been updated successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Could not update record,try again.");
            }
            clearAllFields();
            fillRoomAllotmentTable();
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseMoved
        if (deleteButton.isEnabled()) {
            deleteButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_deleteButtonMouseMoved

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
            RoomAllotmentModel roomAllotmentModel = new RoomAllotmentModel();
            roomAllotmentModel.setModifiedBy(2);
            roomAllotmentModel.setModifiedDate(currentDate);
            roomAllotmentModel.setAllotmentId(roomAllotmentId);
            int result = new RoomAllotmentDAOImpl().deleteRoomAllotmentById(roomAllotmentModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Could not delete record,try again.");
            }
            clearAllFields();
            fillRoomAllotmentTable();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void clearFieldsButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFieldsButtonMouseMoved
        if (clearFieldsButton.isEnabled()) {
            clearFieldsButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_clearFieldsButtonMouseMoved

    private void clearFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsButtonActionPerformed
        clearAllFields();
    }//GEN-LAST:event_clearFieldsButtonActionPerformed

    private void backButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseMoved
        if (backButton.isEnabled()) {
            backButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_backButtonMouseMoved

    private void jPanel2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel2MouseMoved

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel2MouseClicked

    private void appointmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentTableMouseClicked
        appointmentId = (Integer) appointmentTable.getValueAt(appointmentTable.getSelectedRow(), 0);
        AppointmentModel appointmentModel = new AppointmentDAOImpl().getAppointmentById(appointmentId);
        appointmentTextfield.setText(appointmentModel.getPatientModel().getName());
    }//GEN-LAST:event_appointmentTableMouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new MainMenuFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void roomNoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNoComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomNoComboBoxActionPerformed

    private void roomAllotmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomAllotmentTableMouseClicked
        roomAllotmentId = (Integer) roomAllotmentTable.getValueAt(roomAllotmentTable.getSelectedRow(), 0);
        RoomAllotmentModel roomAllotmentModel = new RoomAllotmentDAOImpl().getRoomAllotmentById(roomAllotmentId);
        appointmentTextfield.setText(roomAllotmentModel.getAppointmentModel().getPatientModel().getName());
        allotmentDateChooser.setDate(roomAllotmentModel.getAllotmentDate());
        dischargeDateChooser.setDate(roomAllotmentModel.getDischargeDate());
        statusComboBox.setSelectedItem(roomAllotmentModel.getStatus());
        roomNoComboBox.setSelectedItem(roomAllotmentModel.getRoomDetailModel().getRoomNo());
        setButtons();
    }//GEN-LAST:event_roomAllotmentTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoomAllotmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoomAllotmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoomAllotmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoomAllotmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoomAllotmentFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private com.toedter.calendar.JDateChooser allotmentDateChooser;
    private javax.swing.JTable appointmentTable;
    private javax.swing.JTextField appointmentTextfield;
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearFieldsButton;
    private javax.swing.JButton deleteButton;
    private com.toedter.calendar.JDateChooser dischargeDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable roomAllotmentTable;
    private javax.swing.JComboBox<String> roomNoComboBox;
    private javax.swing.JComboBox<String> statusComboBox;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    private void clearAllFields() {
        allotmentDateChooser.setDate(null);
        dischargeDateChooser.setDate(null);
        statusComboBox.setSelectedIndex(0);
        roomNoComboBox.setSelectedIndex(0);
        appointmentTextfield.setText("");
        appointmentTable.clearSelection();
        roomAllotmentTable.clearSelection();
        resetAddButton();
    }

    private Color resetColor() {
        return Color.BLACK;
    }

    public void setButtons() {
        addButton.setEnabled(false);
        updateButton.setEnabled(true);
        deleteButton.setEnabled(true);
    }

    private void resetAddButton() {
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }

    private void fillAppointmentTable()
    {
        ResultSet resultSet = new AppointmentDAOImpl().getAllAppointments();
        appointmentTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }
    
    private void fillRoomAllotmentTable() {
        ResultSet resultSet = new RoomAllotmentDAOImpl().getAllRoomAllotments();
        roomAllotmentTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }

    private void fillRoomNoComboBox() {
        ResultSet resultSet = new RoomDetailDAOImpl().getAllRoomDetails();
        try {
            while (resultSet.next()) {
                roomNoComboBox.addItem(resultSet.getString("Room Number"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void checkPermissions() {
        ResultSet assignedPermissions = new UserPermissionDAOImpl().getAssignedPermissions(LoginFrame.userType); 
        try {
            while(assignedPermissions.next())
            {
                PermissionModel permissionModel = new PermissionModel();
                permissionModel.setPermission(assignedPermissions.getString("Permission"));
                
                if(permissionModel.getPermission().equals("ADD_ROOM_ALLOTMENT"))
                {
                    addButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("DELETE_ROOM_ALLOTMENT"))
                {
                    deleteButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("UPDATE_ROOM_ALLOTMENT"))
                {
                    updateButton.setVisible(true);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainMenuFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void disableComponents() {
        addButton.setVisible(false);
        updateButton.setVisible(false);
        deleteButton.setVisible(false);
        appointmentTextfield.setEditable(false);
    }
  
}
