/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ehealthpro.frames;

import com.sun.glass.events.KeyEvent;
import ehealthpro.daoimpls.AppointmentDAOImpl;
import ehealthpro.daoimpls.EmployeeDAOImpl;
import ehealthpro.daoimpls.PatientDAOImpl;
import ehealthpro.daoimpls.UserPermissionDAOImpl;
import ehealthpro.models.AppointmentModel;
import ehealthpro.models.EmployeeModel;
import ehealthpro.models.PatientModel;
import ehealthpro.models.PermissionModel;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author sweng
 */
public class AppointmentFrame extends javax.swing.JFrame {

    /**
     * Creates new form AppointmentFrame
     */
    Integer appointmentId;
    Timestamp currentDate = new Timestamp(System.currentTimeMillis());
    static String patientName = "";
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    Integer patientId;
    Integer doctorId;
    public AppointmentFrame() {
        initComponents();
        this.setResizable(false);
        fillDoctorTable();
        this.setTitle("Appointments || E-Health Pro");
        fillAppointmentTable();
        fillPatientTable();
        resetAddButton();
        checkPermissions();
        resetButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        symtomsTextArea = new javax.swing.JTextArea();
        feesStatusComboBox = new javax.swing.JComboBox<>();
        appointmentDate = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        doctorNameTextfield = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        patientNameTextfield = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearFieldsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(153, 153, 255));
        jPanel1.setToolTipText("");
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("Appointment Details");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 350, -1));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 0, 0));
        jLabel2.setText("Fees Status : ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 140, 130, 30));

        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        appointmentTable.setGridColor(new java.awt.Color(0, 0, 0));
        appointmentTable.setOpaque(false);
        appointmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(appointmentTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, 962, 130));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 0, 0));
        jLabel3.setText("Appointment Table :");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, -1, 30));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 0, 0));
        jLabel4.setText("Symtoms : ");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 100, 36));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 0, 0));
        jLabel5.setText("Patient Name :");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 90, 150, 30));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 0, 0));
        jLabel6.setText("Appointment Date :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 190, 36));

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 0, 0));
        jLabel7.setText("Doctor Name :");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, 144, 30));

        symtomsTextArea.setColumns(20);
        symtomsTextArea.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        symtomsTextArea.setRows(5);
        symtomsTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                symtomsTextAreaKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(symtomsTextArea);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 300, 60));

        feesStatusComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        feesStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Fees Status", "Paid", "Unpaid" }));
        jPanel1.add(feesStatusComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 140, 300, 30));

        appointmentDate.setDateFormatString("yyyy-MM-dd HH:mm:ss");
        jPanel1.add(appointmentDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 90, 300, 30));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(204, 0, 0));
        jLabel8.setText("Patients Table :");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 420, -1, 30));

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        patientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(patientTable);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 450, 962, 120));

        doctorNameTextfield.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel1.add(doctorNameTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 140, 300, 30));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 0, 0));
        jLabel9.setText("Doctors Table :");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 570, -1, 30));

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        doctorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(doctorTable);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 600, 962, 120));

        patientNameTextfield.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel1.add(patientNameTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 90, 300, 30));

        backButton.setBackground(new java.awt.Color(153, 0, 0));
        backButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/back.png"))); // NOI18N
        backButton.setText("Go Back");
        backButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        backButton.setContentAreaFilled(false);
        backButton.setOpaque(true);
        backButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backButtonMouseMoved(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 150, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1040, 740));

        jPanel6.setBackground(new java.awt.Color(153, 0, 0));
        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setToolTipText("");
        jPanel6.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel6MouseMoved(evt);
            }
        });
        jPanel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel6MouseClicked(evt);
            }
        });
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(102, 102, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel6.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 162, 260, -1));

        addButton.setBackground(new java.awt.Color(255, 255, 255));
        addButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/add.png"))); // NOI18N
        addButton.setText("Add Record");
        addButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addButton.setContentAreaFilled(false);
        addButton.setOpaque(true);
        addButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addButtonMouseMoved(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel6.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 216, 250, 50));

        updateButton.setBackground(new java.awt.Color(255, 255, 255));
        updateButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/update.png"))); // NOI18N
        updateButton.setText("Update Record");
        updateButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateButton.setContentAreaFilled(false);
        updateButton.setOpaque(true);
        updateButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                updateButtonMouseMoved(evt);
            }
        });
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel6.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 278, 250, -1));

        deleteButton.setBackground(new java.awt.Color(255, 255, 255));
        deleteButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/trash.png"))); // NOI18N
        deleteButton.setText("Delete Record");
        deleteButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteButton.setContentAreaFilled(false);
        deleteButton.setOpaque(true);
        deleteButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                deleteButtonMouseMoved(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel6.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 347, 250, -1));

        clearFieldsButton.setBackground(new java.awt.Color(255, 255, 255));
        clearFieldsButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        clearFieldsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/clearFields.png"))); // NOI18N
        clearFieldsButton.setText("Clear All Fields");
        clearFieldsButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        clearFieldsButton.setContentAreaFilled(false);
        clearFieldsButton.setOpaque(true);
        clearFieldsButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                clearFieldsButtonMouseMoved(evt);
            }
        });
        clearFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsButtonActionPerformed(evt);
            }
        });
        jPanel6.add(clearFieldsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 250, -1));

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 0, 280, 740));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void addButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseMoved
        if (addButton.isEnabled()) {
            addButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_addButtonMouseMoved

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (feesStatusComboBox.getSelectedItem().equals("Select Fees Status")) {
            JOptionPane.showMessageDialog(this, "Please fill fees status field to add record.");
        } else if (appointmentDate.getDate().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill appointment date to add record.");
        } else if (symtomsTextArea.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill symtoms to add record.");
        } else if (doctorNameTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a doctor form doctor table to add record.");
        } else if (doctorNameTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please add patient name from patient table to add record.");
        }else {
            String feesStatus = feesStatusComboBox.getSelectedItem().toString();
            String doctorName = doctorNameTextfield.getText();
            String patientName = doctorNameTextfield.getText();
            String symtoms = symtomsTextArea.getText();
            AppointmentDAOImpl appointmentDAOImpl = new AppointmentDAOImpl();
            AppointmentModel appointmentModel = new AppointmentModel();
            Timestamp getAppointmentDate = Timestamp.valueOf(sdf.format(appointmentDate.getDate()));
            appointmentModel.setAppointmentdate(getAppointmentDate);
            EmployeeModel employeeModel = new EmployeeModel();
            if(doctorId==null)
            {
                JOptionPane.showMessageDialog(this, "Please select doctor name from doctor table to add record.");
            }else
            {
                employeeModel.setEmployeeId(doctorId);
                appointmentModel.setEmployeeModel(employeeModel);
            }
            PatientModel patientModel = new PatientModel();
            if(patientId==null)
            {
                JOptionPane.showMessageDialog(this, "Please select patient name from patient table to add record.");
            }else
            {
                patientModel.setPatientId(patientId);
                appointmentModel.setPatientModel(patientModel);
            }
            appointmentModel.setCreatedBy(1);
            appointmentModel.setModifiedBy(1);
            Timestamp currentTime = new Timestamp(System.currentTimeMillis());
            appointmentModel.setCreatedDate(currentTime);
            appointmentModel.setModifiedDate(currentTime);
            appointmentModel.setSymtoms(symtoms);
            appointmentModel.setFeesStatus(feesStatus);
            int result = appointmentDAOImpl.addAppointment(appointmentModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been added successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Could not add record try again.");
            }
            clearAllFields();
            fillAppointmentTable();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseMoved
        if (updateButton.isEnabled()) {
            updateButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_updateButtonMouseMoved

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (feesStatusComboBox.getSelectedItem().equals("Select Fees Status")) {
            JOptionPane.showMessageDialog(this, "Please fill fees status field to update record.");
        } else if (appointmentDate.getDate().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill appointment date to update record.");
        } else if (symtomsTextArea.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill symtoms to update record.");
        } else if (doctorNameTextfield.getText().equals("Select Doctor")) {
            JOptionPane.showMessageDialog(this, "Please select a doctor from doctor table to update record.");
        } else if (doctorNameTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Patient name field is empty.");
        }else {
            String feesStatus = feesStatusComboBox.getSelectedItem().toString();
            Timestamp getAppointmentDate = Timestamp.valueOf(sdf.format(appointmentDate.getDate()));
            String doctorName = doctorNameTextfield.getText();
            String patientName = doctorNameTextfield.getText();
            String symtoms = symtomsTextArea.getText();
            AppointmentDAOImpl appointmentDAOImpl = new AppointmentDAOImpl();
            AppointmentModel appointmentModel = new AppointmentModel();
            appointmentModel.setAppointmentdate(getAppointmentDate);
            EmployeeModel employeeModel = new EmployeeModel();
            employeeModel.setEmployeeId(doctorId);
            appointmentModel.setEmployeeModel(employeeModel);
            PatientModel patientModel = new PatientModel();
            patientModel.setPatientId(patientId);
            appointmentModel.setPatientModel(patientModel);
            appointmentModel.setModifiedBy(2);
            Timestamp currentTime = new Timestamp(System.currentTimeMillis());
            appointmentModel.setModifiedDate(currentTime);
            appointmentModel.setSymtoms(symtoms);
            appointmentModel.setFeesStatus(feesStatus);
            appointmentModel.setAppointmentId(appointmentId);
            int result = appointmentDAOImpl.updateAppointment(appointmentModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been updated successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Could not add record try again.");
            }
            clearAllFields();
            fillAppointmentTable();
        }        
    }//GEN-LAST:event_updateButtonActionPerformed

    private void backButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseMoved
        backButton.setForeground(Color.red);
    }//GEN-LAST:event_backButtonMouseMoved

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new MainMenuFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void deleteButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseMoved
        if (deleteButton.isEnabled()) {
            deleteButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_deleteButtonMouseMoved

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (feesStatusComboBox.getSelectedItem().equals("Select Fees Status")) {
            JOptionPane.showMessageDialog(this, "Please fill fees status field to delete record.");
        } else if (appointmentDate.getDate().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill appointment date to delete record.");
        } else if (symtomsTextArea.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill symtoms to delete record.");
        } else if (doctorNameTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a from doctor doctor to delete record.");
        } else if (doctorNameTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please add patient name to delete record.");
        }else {
            String doctorName = doctorNameTextfield.getText();
            String patientName = doctorNameTextfield.getText();
            String symtoms = symtomsTextArea.getText();
            AppointmentDAOImpl appointmentDAOImpl = new AppointmentDAOImpl();
            AppointmentModel appointmentModel = new AppointmentModel();
            EmployeeModel employeeModel = new EmployeeDAOImpl().getEmployeeByName(doctorName);
            appointmentModel.setEmployeeModel(employeeModel);
            PatientModel patientModel = new PatientDAOImpl().getPatientByName(patientName);
            appointmentModel.setPatientModel(patientModel);
            appointmentModel.setCreatedBy(2);
            appointmentModel.setModifiedBy(2);
            Timestamp currentTime = new Timestamp(System.currentTimeMillis());
            appointmentModel.setCreatedDate(currentTime);
            appointmentModel.setModifiedDate(currentTime);
            appointmentModel.setSymtoms(symtoms);
            appointmentModel.setAppointmentId(appointmentId);
            int result = appointmentDAOImpl.deleteAppointmentById(appointmentModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Could not delete record try again.");
            }
            clearAllFields();
            fillAppointmentTable();
        }        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void clearFieldsButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFieldsButtonMouseMoved
        if (clearFieldsButton.isEnabled()) {
            clearFieldsButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_clearFieldsButtonMouseMoved

    private void clearFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsButtonActionPerformed
        clearAllFields();
    }//GEN-LAST:event_clearFieldsButtonActionPerformed

    private void symtomsTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_symtomsTextAreaKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isLetter(c) || (c==KeyEvent.VK_BACKSPACE) || (c==KeyEvent.VK_DELETE) || (c==KeyEvent.VK_SPACE)))
        {
            evt.consume();
        }
    }//GEN-LAST:event_symtomsTextAreaKeyTyped

    private void patientTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientTableMouseClicked
        patientId = (Integer) patientTable.getValueAt(patientTable.getSelectedRow(), 0);
        PatientModel patientModel = new PatientDAOImpl().getPatientById(patientId);
        patientNameTextfield.setText(patientModel.getName());
    }//GEN-LAST:event_patientTableMouseClicked

    private void appointmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentTableMouseClicked
        appointmentId = (Integer) appointmentTable.getValueAt(appointmentTable.getSelectedRow(), 0);
        AppointmentModel appointmentModel = new AppointmentDAOImpl().getAppointmentById(appointmentId);
        appointmentDate.setDate(appointmentModel.getAppointmentdate());
        patientNameTextfield.setText(appointmentModel.getPatientModel().getName());
        doctorNameTextfield.setText(appointmentModel.getEmployeeModel().getName());
        feesStatusComboBox.setSelectedItem(appointmentModel.getFeesStatus());
        symtomsTextArea.setText(appointmentModel.getSymtoms());
        doctorId = appointmentModel.getEmployeeModel().getEmployeeId();
        patientId = appointmentModel.getPatientModel().getPatientId();
        setButtons();
    }//GEN-LAST:event_appointmentTableMouseClicked

    private void doctorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorTableMouseClicked
        doctorId = (Integer) doctorTable.getValueAt(doctorTable.getSelectedRow(), 0);
        EmployeeModel employeeModel = new EmployeeDAOImpl().getEmployeeById(doctorId);
        doctorNameTextfield.setText(employeeModel.getName());
    }//GEN-LAST:event_doctorTableMouseClicked

    private void jPanel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel6MouseClicked

    private void jPanel6MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel6MouseMoved

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel1MouseMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private com.toedter.calendar.JDateChooser appointmentDate;
    private javax.swing.JTable appointmentTable;
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearFieldsButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField doctorNameTextfield;
    private javax.swing.JTable doctorTable;
    private javax.swing.JComboBox<String> feesStatusComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField patientNameTextfield;
    private javax.swing.JTable patientTable;
    private javax.swing.JTextArea symtomsTextArea;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    private void fillAppointmentTable() {
        ResultSet resultSet = new AppointmentDAOImpl().getAllAppointments();
        appointmentTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }
    
    private void clearAllFields() {
        appointmentDate.setDate(null);
        feesStatusComboBox.setSelectedIndex(0);
        symtomsTextArea.setText("");
        patientNameTextfield.setText("");
        doctorNameTextfield.setText("");
        appointmentTable.clearSelection();
        doctorTable.clearSelection();
        patientTable.clearSelection();
        resetButtons();
        patientId = null;
        doctorId = null;
    }
    
    private Color resetColor() {
        return Color.BLACK;
    }
    
    private void setButtons() {
        addButton.setEnabled(false);
        updateButton.setEnabled(true);
        deleteButton.setEnabled(true);
        clearFieldsButton.setEnabled(true);
    }
    
    private void resetButtons() {
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }
    
    private void resetAddButton() {
        addButton.setVisible(false);
        updateButton.setVisible(false);
        deleteButton.setVisible(false);
        doctorNameTextfield.setEditable(false);
        patientNameTextfield.setEditable(false);
    }
    
    private void fillDoctorTable() {
        ResultSet resultSet = new EmployeeDAOImpl().getAllDoctorEmployees();
        doctorTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }
    
    private void checkPermissions() {
        ResultSet assignedPermissions = new UserPermissionDAOImpl().getAssignedPermissions(LoginFrame.userType); 
        try {
            while(assignedPermissions.next())
            {
                PermissionModel permissionModel = new PermissionModel();
                permissionModel.setPermission(assignedPermissions.getString("Permission"));
                
                if(permissionModel.getPermission().equals("ADD_APPOINTMENT"))
                {
                    addButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("DELETE_APPOINTMENT"))
                {
                    deleteButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("UPDATE_APPOINTMENT"))
                {
                    updateButton.setVisible(true);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainMenuFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void fillPatientTable() {
        ResultSet resultSet = new PatientDAOImpl().getAllPatients();
        patientTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }
}
