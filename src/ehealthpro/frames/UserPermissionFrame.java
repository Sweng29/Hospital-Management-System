/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ehealthpro.frames;

import ehealthpro.daoimpls.EmployeeDAOImpl;
import ehealthpro.daoimpls.PatientDAOImpl;
import ehealthpro.daoimpls.PermissionDAOImpl;
import ehealthpro.daoimpls.UserPermissionDAOImpl;
import ehealthpro.daoimpls.UserTypeDAOImpl;
import ehealthpro.models.PermissionModel;
import ehealthpro.models.UserPermissionModel;
import ehealthpro.models.UserTypeModel;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author sweng
 */
public class UserPermissionFrame extends javax.swing.JFrame {

    /**
     * Creates new form UserPermissionFrame
     */
    Integer userPermissionId;
    Timestamp currentDate = new Timestamp(System.currentTimeMillis());

    public UserPermissionFrame() {
        initComponents();
        fillPermissionComboBox();
        fillUserTypeComboBox();
        this.setTitle("User Permission || E-Health Pro");
        this.setResizable(false);
        addButton.setVisible(false);
        updateButton.setVisible(false);
        deleteButton.setVisible(false);
        checkPermissions();
        resetAddButton();
        fillUserPermissionTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userPermissionTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        userTypeComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        permissionComboBox = new javax.swing.JComboBox<>();
        backButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        clearFieldsButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 204, 255));
        jPanel1.setToolTipText("");
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("User Permission");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 0, 310, 70));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("Permission :");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 140, 100, 30));

        userPermissionTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        userPermissionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        userPermissionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userPermissionTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userPermissionTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 1330, 380));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("User Permission Record :");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, 30));

        userTypeComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        userTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select User Type" }));
        jPanel1.add(userTypeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 140, 300, 30));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setText("User Type :");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, 100, 30));

        permissionComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        permissionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Permission" }));
        jPanel1.add(permissionComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 140, 300, 30));

        backButton.setBackground(new java.awt.Color(153, 0, 0));
        backButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/back.png"))); // NOI18N
        backButton.setText("Go Back");
        backButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        backButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backButtonMouseMoved(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 170, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1360, 620));

        jPanel6.setBackground(new java.awt.Color(153, 0, 0));
        jPanel6.setToolTipText("");
        jPanel6.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel6MouseMoved(evt);
            }
        });
        jPanel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel6MouseClicked(evt);
            }
        });
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(102, 102, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel6.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 162, 260, -1));

        clearFieldsButton.setBackground(new java.awt.Color(255, 255, 255));
        clearFieldsButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        clearFieldsButton.setForeground(new java.awt.Color(153, 0, 0));
        clearFieldsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/clearFields.png"))); // NOI18N
        clearFieldsButton.setText("Clear All Fields");
        clearFieldsButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        clearFieldsButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                clearFieldsButtonMouseMoved(evt);
            }
        });
        clearFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsButtonActionPerformed(evt);
            }
        });
        jPanel6.add(clearFieldsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 40, 230, -1));

        deleteButton.setBackground(new java.awt.Color(255, 255, 255));
        deleteButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(153, 0, 0));
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/trash.png"))); // NOI18N
        deleteButton.setText("Delete Record");
        deleteButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                deleteButtonMouseMoved(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel6.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 40, 220, -1));

        updateButton.setBackground(new java.awt.Color(255, 255, 255));
        updateButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        updateButton.setForeground(new java.awt.Color(153, 0, 0));
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/update.png"))); // NOI18N
        updateButton.setText("Update Record");
        updateButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                updateButtonMouseMoved(evt);
            }
        });
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel6.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 40, 220, -1));

        addButton.setBackground(new java.awt.Color(255, 255, 255));
        addButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addButton.setForeground(new java.awt.Color(153, 0, 0));
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/add.png"))); // NOI18N
        addButton.setText("Add Record");
        addButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addButtonMouseMoved(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel6.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 230, 50));

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 620, 1360, 120));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userPermissionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userPermissionTableMouseClicked
        userPermissionId = (Integer) userPermissionTable.getValueAt(userPermissionTable.getSelectedRow(), 0);
        UserPermissionModel userPermissionModel = new UserPermissionDAOImpl().getUserPermissionRecord(userPermissionId);
        UserTypeModel userTypeModel = new UserTypeDAOImpl().getUserTypeById(userPermissionModel.getUserTypeModel().getUserTypeId());
        PermissionModel permissionModel = new PermissionDAOImpl().getPermissionById(userPermissionModel.getPermissionModel().getPermissionId());
        userTypeComboBox.setSelectedItem(userTypeModel.getUserType());
        permissionComboBox.setSelectedItem(permissionModel.getPermission());
        setButtons();
    }//GEN-LAST:event_userPermissionTableMouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void addButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseMoved
        if (addButton.isEnabled()) {
            addButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_addButtonMouseMoved

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (permissionComboBox.getSelectedItem().equals("Select Permission")) {
            JOptionPane.showMessageDialog(this, "Please fill permission field to add record.");
        } else if (userTypeComboBox.getSelectedItem().equals("Select User Type")) {
            JOptionPane.showMessageDialog(this, "Please select user type to add record.");

        } else {
            String permission = permissionComboBox.getSelectedItem().toString();
            String userType = userTypeComboBox.getSelectedItem().toString();
            UserPermissionModel userPermissionModel = new UserPermissionModel();
            PermissionModel permissionModel = new PermissionDAOImpl().getPermissionByName(permission);
            UserTypeModel userTypeModel = new UserTypeDAOImpl().getUserTypeByName(userType);
            userPermissionModel.setPermissionModel(permissionModel);
            userPermissionModel.setUserTypeModel(userTypeModel);
            userPermissionModel.setCreatedBy(1);
            userPermissionModel.setModifiedBy(1);
            currentDate = new Timestamp(System.currentTimeMillis());
            userPermissionModel.setCreatedDate(currentDate);
            userPermissionModel.setModifiedDate(currentDate);
            int result = new UserPermissionDAOImpl().addUserPermission(userPermissionModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been added successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Could not add record try again.");
            }
            clearAllFields();
            resetAddButton();
            fillUserPermissionTable();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseMoved
        if (updateButton.isEnabled()) {
            updateButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_updateButtonMouseMoved

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (permissionComboBox.getSelectedItem().equals("Select Permission")) {
            JOptionPane.showMessageDialog(this, "Please fill permission field to update record.");
        } else if (userTypeComboBox.getSelectedItem().equals("Select User Type")) {
            JOptionPane.showMessageDialog(this, "Please select user type to update record.");
        } else {
            String permission = permissionComboBox.getSelectedItem().toString();
            String userType = userTypeComboBox.getSelectedItem().toString();
            UserPermissionModel userPermissionModel = new UserPermissionModel();
            PermissionModel permissionModel = new PermissionDAOImpl().getPermissionByName(permission);
            UserTypeModel userTypeModel = new UserTypeDAOImpl().getUserTypeByName(userType);
            permissionModel.setPermission(permission);
            userPermissionModel.setPermissionModel(permissionModel);
            userPermissionModel.setUserTypeModel(userTypeModel);
            userPermissionModel.setModifiedBy(2);
            userPermissionModel.setUserPermissionId(userPermissionId);
            currentDate = new Timestamp(System.currentTimeMillis());
            userPermissionModel.setModifiedDate(currentDate);
            int result = new UserPermissionDAOImpl().updateUserPermission(userPermissionModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been updated successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Could not update record try again.");
            }
            clearAllFields();
            resetAddButton();
            fillUserPermissionTable();
    }//GEN-LAST:event_updateButtonActionPerformed
 }
    private void deleteButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseMoved
        if (deleteButton.isEnabled()) {
            deleteButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_deleteButtonMouseMoved

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        UserPermissionModel userPermissionModel = new UserPermissionModel();
        userPermissionModel.setModifiedBy(2);
        currentDate = new Timestamp(System.currentTimeMillis());
        userPermissionModel.setModifiedDate(currentDate);
        userPermissionModel.setUserPermissionId(userPermissionId);
        int result = new UserPermissionDAOImpl().deleteUserPermissionById(userPermissionModel);
        if (result > 0) {
            JOptionPane.showMessageDialog(this, result + " record has been deleted successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Could not delete record try again.");
        }
        clearAllFields();
        resetAddButton();
        fillUserPermissionTable();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void clearFieldsButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFieldsButtonMouseMoved
        if (clearFieldsButton.isEnabled()) {
            clearFieldsButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_clearFieldsButtonMouseMoved

    private void clearFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsButtonActionPerformed
        clearAllFields();
    }//GEN-LAST:event_clearFieldsButtonActionPerformed

    private void jPanel6MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel6MouseMoved

    private void jPanel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel6MouseClicked

    private void backButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseMoved
        backButton.setForeground(Color.red);
    }//GEN-LAST:event_backButtonMouseMoved

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new MainMenuFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_jPanel1MouseMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserPermissionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserPermissionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserPermissionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserPermissionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserPermissionFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearFieldsButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> permissionComboBox;
    private javax.swing.JButton updateButton;
    private javax.swing.JTable userPermissionTable;
    private javax.swing.JComboBox<String> userTypeComboBox;
    // End of variables declaration//GEN-END:variables

    private void clearAllFields() {
        permissionComboBox.setSelectedIndex(0);
        userTypeComboBox.setSelectedIndex(0);
        userPermissionTable.clearSelection();
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);

    }

    private Color resetColor() {
        return Color.BLACK;
    }

    private void setButtons() {
        addButton.setEnabled(false);
        updateButton.setEnabled(true);
        deleteButton.setEnabled(true);
    }

    private void resetAddButton() {
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }

    private void fillUserTypeComboBox() {
        ResultSet resultSet = new UserTypeDAOImpl().getAllUserTypes();
        try {
            while (resultSet.next()) {
                userTypeComboBox.addItem(resultSet.getString("User Type"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillPermissionComboBox() {
        ResultSet resultSet = new PermissionDAOImpl().getAllPermissions();
        try {
            while (resultSet.next()) {
                permissionComboBox.addItem(resultSet.getString("Permissions"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillUserPermissionTable() {
        ResultSet resultSet = new UserPermissionDAOImpl().getUserPermissions();
        userPermissionTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }
    
    private void checkPermissions() {
        ResultSet assignedPermissions = new UserPermissionDAOImpl().getAssignedPermissions(LoginFrame.userType); 
        try {
            while(assignedPermissions.next())
            {
                PermissionModel permissionModel = new PermissionModel();
                permissionModel.setPermission(assignedPermissions.getString("Permission"));
                
                if(permissionModel.getPermission().equals("ADD_USER_PERMISSION"))
                {
                    addButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("DELETE_USER_PERMISSION"))
                {
                    deleteButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("UPDATE_USER_PERMISSION"))
                {
                    updateButton.setVisible(true);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainMenuFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
