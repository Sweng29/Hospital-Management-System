/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ehealthpro.frames;

import ehealthpro.daoimpls.PermissionDAOImpl;
import ehealthpro.daoimpls.UserPermissionDAOImpl;
import ehealthpro.daoimpls.UserTypeDAOImpl;
import ehealthpro.models.PermissionModel;
import ehealthpro.models.UserPermissionModel;
import ehealthpro.models.UserTypeModel;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author sweng
 */
public class ListOfPermissionsFrame extends javax.swing.JFrame {

    /**
     * Creates new form ListOfPermissionsFrame
     */
    DefaultListModel assignedModel = new DefaultListModel();
    DefaultListModel unassignedModel = new DefaultListModel();
    ResultSet resultSet = null;
    Timestamp currentDate = new Timestamp(System.currentTimeMillis());
    String value = "";
    String userType;
    Integer op;

    public ListOfPermissionsFrame() {
        initComponents();
        this.setResizable(false);
        this.setTitle("Permissions List || E-Health Pro");
        fillUserTypeComboBox();
        fillUnassignedPermissions();
        setButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        assignedList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        unassignedList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        userTypeComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        removeMultiplePermissions = new javax.swing.JButton();
        addMultiplePermissions = new javax.swing.JButton();
        removeSinglePermission = new javax.swing.JButton();
        addSinglePermission = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        assignedList.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jScrollPane1.setViewportView(assignedList);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 240, 260, 310));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("Assigned Permissions");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 200, 250, 32));

        unassignedList.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        unassignedList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unassignedListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(unassignedList);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 240, 280, 310));

        jLabel2.setFont(new java.awt.Font("Berlin Sans FB", 0, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("Assign Permissions");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, 370, 50));

        addButton.setBackground(new java.awt.Color(153, 0, 0));
        addButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("Add Permissions");
        addButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addButton.setContentAreaFilled(false);
        addButton.setOpaque(true);
        addButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addButtonMouseMoved(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 450, 290, 40));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("User Type :");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, -1, 32));

        userTypeComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        userTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select User Type" }));
        userTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                userTypeComboBoxItemStateChanged(evt);
            }
        });
        jPanel1.add(userTypeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 120, 260, 30));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("Unassigned Permissions");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 290, 32));

        removeMultiplePermissions.setBackground(new java.awt.Color(153, 0, 0));
        removeMultiplePermissions.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        removeMultiplePermissions.setForeground(new java.awt.Color(255, 255, 255));
        removeMultiplePermissions.setText("<<");
        removeMultiplePermissions.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        removeMultiplePermissions.setContentAreaFilled(false);
        removeMultiplePermissions.setOpaque(true);
        removeMultiplePermissions.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                removeMultiplePermissionsMouseMoved(evt);
            }
        });
        removeMultiplePermissions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMultiplePermissionsActionPerformed(evt);
            }
        });
        jPanel1.add(removeMultiplePermissions, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 390, 290, 40));

        addMultiplePermissions.setBackground(new java.awt.Color(153, 0, 0));
        addMultiplePermissions.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addMultiplePermissions.setForeground(new java.awt.Color(255, 255, 255));
        addMultiplePermissions.setText(">>");
        addMultiplePermissions.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addMultiplePermissions.setContentAreaFilled(false);
        addMultiplePermissions.setOpaque(true);
        addMultiplePermissions.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addMultiplePermissionsMouseMoved(evt);
            }
        });
        addMultiplePermissions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMultiplePermissionsActionPerformed(evt);
            }
        });
        jPanel1.add(addMultiplePermissions, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 280, 290, 40));

        removeSinglePermission.setBackground(new java.awt.Color(153, 0, 0));
        removeSinglePermission.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        removeSinglePermission.setForeground(new java.awt.Color(255, 255, 255));
        removeSinglePermission.setText("<");
        removeSinglePermission.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        removeSinglePermission.setContentAreaFilled(false);
        removeSinglePermission.setOpaque(true);
        removeSinglePermission.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                removeSinglePermissionMouseMoved(evt);
            }
        });
        removeSinglePermission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSinglePermissionActionPerformed(evt);
            }
        });
        jPanel1.add(removeSinglePermission, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 340, 290, 40));

        addSinglePermission.setBackground(new java.awt.Color(153, 0, 0));
        addSinglePermission.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        addSinglePermission.setForeground(new java.awt.Color(255, 255, 255));
        addSinglePermission.setText(">");
        addSinglePermission.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addSinglePermission.setContentAreaFilled(false);
        addSinglePermission.setOpaque(true);
        addSinglePermission.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addSinglePermissionMouseMoved(evt);
            }
        });
        addSinglePermission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSinglePermissionActionPerformed(evt);
            }
        });
        jPanel1.add(addSinglePermission, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 220, 290, 40));

        removeButton.setBackground(new java.awt.Color(153, 0, 0));
        removeButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        removeButton.setForeground(new java.awt.Color(255, 255, 255));
        removeButton.setText("Remove Permissions");
        removeButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        removeButton.setContentAreaFilled(false);
        removeButton.setOpaque(true);
        removeButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                removeButtonMouseMoved(evt);
            }
        });
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(removeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 510, 290, 40));

        backButton.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/back.png"))); // NOI18N
        backButton.setText("Back");
        backButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        backButton.setContentAreaFilled(false);
        backButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backButtonMouseMoved(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 160, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1240, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        addPermissions();
    }//GEN-LAST:event_addButtonActionPerformed

    private void userTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_userTypeComboBoxItemStateChanged
        resetButtons();
        String userType = userTypeComboBox.getSelectedItem().toString();
        if (userType.equals("Select User Type")) {
            fillUnassignedPermissions();
        } else {
            unassignedModel.clear();
            unassignedList.setModel(unassignedModel);
            assignedModel.clear();
            assignedList.setModel(assignedModel);
            resultSet = new UserPermissionDAOImpl().getAssignedPermissions(userType);
            ResultSet resultSetTwo = new UserPermissionDAOImpl().getUnAssignedPermissions(userType);
            try {
                while (resultSet.next()) {
                    assignedModel.addElement(resultSet.getString("Permission"));
                }
                while (resultSetTwo.next()) {
                    unassignedModel.addElement(resultSetTwo.getString("Permission"));
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            assignedList.setModel(assignedModel);
            unassignedList.setModel(unassignedModel);
        }
    }//GEN-LAST:event_userTypeComboBoxItemStateChanged

    private void addMultiplePermissionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMultiplePermissionsActionPerformed
        unassignedModel = (DefaultListModel) unassignedList.getModel();
        int i = 0;
        int size = unassignedModel.getSize();
        while (size > 0) {
            assignedModel.addElement(unassignedModel.get(i));
            i++;
            size--;
        }
        unassignedModel.clear();
        unassignedList.setModel(unassignedModel);
        assignedList.setModel(assignedModel);
    }//GEN-LAST:event_addMultiplePermissionsActionPerformed

    private void unassignedListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unassignedListMouseClicked
        
    }//GEN-LAST:event_unassignedListMouseClicked

    private void addSinglePermissionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSinglePermissionActionPerformed
        if (unassignedList.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select Permission from list to move.");
        } else {
            value = unassignedList.getSelectedValue();
            unassignedModel = (DefaultListModel) unassignedList.getModel();
            int index = unassignedList.getSelectedIndex();
            if (index != -1) {
                unassignedModel.remove(index);
                assignedModel.addElement(value);
            }
            unassignedList.setModel(unassignedModel);
            assignedList.setModel(assignedModel);
        }
    }//GEN-LAST:event_addSinglePermissionActionPerformed

    private void removeSinglePermissionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSinglePermissionActionPerformed
        if (assignedList.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select Permission from list to move.");
        } else {
            value = assignedList.getSelectedValue();
            assignedModel = (DefaultListModel) assignedList.getModel();
            int index = assignedList.getSelectedIndex();
            if (index != -1) {
                assignedModel.removeElement(value);
                unassignedModel.addElement(value);
            }
            unassignedList.setModel(unassignedModel);
            assignedList.setModel(assignedModel);
            op = 1;
        }
    }//GEN-LAST:event_removeSinglePermissionActionPerformed

    private void removeMultiplePermissionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMultiplePermissionsActionPerformed
        assignedModel = (DefaultListModel) assignedList.getModel();
        int i = 0;
        int size = assignedModel.getSize();
        while (size > 0) {
            unassignedModel.addElement(assignedModel.get(i));
            i++;
            size--;
        }
        assignedModel.clear();
        unassignedList.setModel(unassignedModel);
        assignedList.setModel(assignedModel);
    }//GEN-LAST:event_removeMultiplePermissionsActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        userType = userTypeComboBox.getSelectedItem().toString();
        if (userTypeComboBox.getSelectedItem().toString().equals("Select User Type")) {
            JOptionPane.showMessageDialog(this, "Please select user Type");
        } else {
            int result =0;
                unassignedModel = (DefaultListModel) unassignedList.getModel();
                UserTypeModel userTypeModel = new UserTypeDAOImpl().getUserTypeByName(userType);
                int size = unassignedModel.getSize();
                int i = 0;
                PermissionModel permissionModel;
                while(size>0)
                {
                    permissionModel = new PermissionDAOImpl().getPermissionByName(unassignedModel.getElementAt(i).toString());
                    UserPermissionModel userPermissionModel = new UserPermissionModel();
                    userPermissionModel.setPermissionModel(permissionModel);
                    userPermissionModel.setUserTypeModel(userTypeModel);
                    userPermissionModel.setModifiedBy(2);
                    userPermissionModel.setModifiedDate(currentDate);
                    result = new UserPermissionDAOImpl().deleteUserPermissionById(userPermissionModel);
                    i++;
                    size--;
                }
                if(result>0)
                {
                    JOptionPane.showMessageDialog(this, "Permission has been removed from "+userType);
                }else
                {
                    JOptionPane.showMessageDialog(this, "Could not remove permission,try again.");
                }
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void addSinglePermissionMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addSinglePermissionMouseMoved
        if (addSinglePermission.isEnabled()) {
            addSinglePermission.setForeground(Color.red);
        }
    }//GEN-LAST:event_addSinglePermissionMouseMoved

    private void addMultiplePermissionsMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMultiplePermissionsMouseMoved
        if (addMultiplePermissions.isEnabled()) {
            addMultiplePermissions.setForeground(Color.red);
        }
    }//GEN-LAST:event_addMultiplePermissionsMouseMoved

    private void removeSinglePermissionMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeSinglePermissionMouseMoved
        if (removeSinglePermission.isEnabled()) {
            removeSinglePermission.setForeground(Color.red);
        }
    }//GEN-LAST:event_removeSinglePermissionMouseMoved

    private void removeMultiplePermissionsMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeMultiplePermissionsMouseMoved
        if (removeMultiplePermissions.isEnabled()) {
            removeMultiplePermissions.setForeground(Color.red);
        }
    }//GEN-LAST:event_removeMultiplePermissionsMouseMoved

    private void addButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseMoved
        if (addButton.isEnabled()) {
            addButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_addButtonMouseMoved

    private void removeButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButtonMouseMoved
        if (removeButton.isEnabled()) {
            removeButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_removeButtonMouseMoved

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        addSinglePermission.setForeground(resetColor());
        addMultiplePermissions.setForeground(resetColor());
        removeSinglePermission.setForeground(resetColor());
        removeMultiplePermissions.setForeground(resetColor());
        addButton.setForeground(resetColor());
        removeButton.setForeground(resetColor());
        backButton.setForeground(Color.BLACK);
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void backButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseMoved
        backButton.setForeground(Color.red);
    }//GEN-LAST:event_backButtonMouseMoved

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.dispose();
        new MainMenuFrame().setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListOfPermissionsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListOfPermissionsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListOfPermissionsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListOfPermissionsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListOfPermissionsFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addMultiplePermissions;
    private javax.swing.JButton addSinglePermission;
    private javax.swing.JList<String> assignedList;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton removeMultiplePermissions;
    private javax.swing.JButton removeSinglePermission;
    private javax.swing.JList<String> unassignedList;
    private javax.swing.JComboBox<String> userTypeComboBox;
    // End of variables declaration//GEN-END:variables

    private void fillUserTypeComboBox() {
        ResultSet resultSet = new UserTypeDAOImpl().getAllUserTypes();
        try {
            while (resultSet.next()) {
                userTypeComboBox.addItem(resultSet.getString("User Type"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillUnassignedPermissions() {
        try {
            assignedModel.clear();
            assignedList.setModel(assignedModel);
            unassignedModel.clear();
            unassignedList.setModel(unassignedModel);
            ResultSet resultSet = new PermissionDAOImpl().getAllPermissions();
            int i = 0;
            while (resultSet.next()) {
                unassignedModel.addElement(resultSet.getString("Permissions"));
            }

        } catch (SQLException ex) {
            Logger.getLogger(ListOfPermissionsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        unassignedList.setModel(unassignedModel);
    }

    private void refreshPermissionLists() {
        String userType = userTypeComboBox.getSelectedItem().toString();
        if (userType.equals("Select User Type")) {
            JOptionPane.showMessageDialog(this, "Please select user type.");
        } else {
            unassignedModel.clear();
            unassignedList.setModel(unassignedModel);
            assignedModel.clear();
            assignedList.setModel(assignedModel);
            resultSet = new UserPermissionDAOImpl().getAssignedPermissions(userType);
            ResultSet resultSetTwo = new UserPermissionDAOImpl().getUnAssignedPermissions(userType);
            try {
                while (resultSet.next()) {
                    assignedModel.addElement(resultSet.getString("Permission"));
                }
                while (resultSetTwo.next()) {
                    unassignedModel.addElement(resultSetTwo.getString("Permission"));
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            assignedList.setModel(assignedModel);
            unassignedList.setModel(unassignedModel);
        }
    }

    private void clearAllFields() {
        userTypeComboBox.setSelectedIndex(0);
        fillUnassignedPermissions();
        setButtons();
    }

    private Color resetColor() {
        return Color.WHITE;
    }

    private void setButtons() {
            addSinglePermission.setEnabled(false);
            addMultiplePermissions.setEnabled(false);
            removeSinglePermission.setEnabled(false);
            removeMultiplePermissions.setEnabled(false);
            addButton.setEnabled(false);
            removeButton.setEnabled(false);
    }

    private void addPermissions() {
        userType = userTypeComboBox.getSelectedItem().toString();
        if (userTypeComboBox.getSelectedItem().toString().equals("Select User Type")) {
            JOptionPane.showMessageDialog(this, "Please select user Type");
        } else {
            int size = assignedModel.getSize();
            int result = 0;
            int i = 0;
            while (size > 0) {
                UserTypeModel userTypeModel = new UserTypeDAOImpl().getUserTypeByName(userType);
                value = assignedModel.getElementAt(i).toString();
                PermissionModel permissionModel = new PermissionDAOImpl().getPermissionByName(value);
                UserPermissionModel userPermissionModel = new UserPermissionModel();
                userPermissionModel.setPermissionModel(permissionModel);
                userPermissionModel.setUserTypeModel(userTypeModel);
                userPermissionModel.setModifiedBy(2);
                userPermissionModel.setModifiedDate(currentDate);
                result = new UserPermissionDAOImpl().deleteUserPermissionById(userPermissionModel);
                size--;
                i++;
            }
            size = assignedModel.getSize();
            i = 0;
            while (size > 0) {
                UserTypeModel userTypeModel = new UserTypeDAOImpl().getUserTypeByName(userType);
                value = assignedModel.getElementAt(i).toString();
                PermissionModel permissionModel = new PermissionDAOImpl().getPermissionByName(value);
                UserPermissionModel userPermissionModel = new UserPermissionModel();
                userPermissionModel.setPermissionModel(permissionModel);
                userPermissionModel.setUserTypeModel(userTypeModel);
                userPermissionModel.setCreatedBy(1);
                userPermissionModel.setCreatedDate(currentDate);
                userPermissionModel.setModifiedBy(1);
                userPermissionModel.setModifiedDate(currentDate);
                result = new UserPermissionDAOImpl().addUserPermission(userPermissionModel);
                size--;
                i++;
            }
            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Permission has been given to " + userTypeComboBox.getSelectedItem().toString());
                refreshPermissionLists();
            } else {
                JOptionPane.showMessageDialog(this, "Could not add permission try again.");
            }
        }
    }

    private void resetButtons() {
           addSinglePermission.setEnabled(true);
            addMultiplePermissions.setEnabled(true);
            removeSinglePermission.setEnabled(true);
            removeMultiplePermissions.setEnabled(true);
            addButton.setEnabled(true);
            removeButton.setEnabled(true);
    }
}
