/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ehealthpro.frames;

import ehealthpro.daoimpls.AppointmentDAOImpl;
import ehealthpro.daoimpls.PatientDAOImpl;
import ehealthpro.daoimpls.PatientTestDAOImpl;
import ehealthpro.daoimpls.TestDAOImpl;
import ehealthpro.daoimpls.UserPermissionDAOImpl;
import ehealthpro.models.AppointmentModel;
import ehealthpro.models.PatientModel;
import ehealthpro.models.PatientTestModel;
import ehealthpro.models.PermissionModel;
import ehealthpro.models.TestModel;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author sweng
 */
public class PatientTestFrame extends javax.swing.JFrame {

    /**
     * Creates new form PatientTestFrame
     */
    Integer patientTestId;
    Timestamp currentDate = new Timestamp(System.currentTimeMillis());
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    static String patientName = "";
    static String appointmentName = "";
    Integer appointmentId;
    public PatientTestFrame() {
        initComponents();
        this.setTitle("Patient Test || E-Health Pro");
        this.setResizable(false);
        fillPatientTestTable();
        fillTestTypeComboBox();
        fillAppointmentTable();
        disableComponents();
        checkPermissions();
        resetAddButton();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        clearFieldsButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientTestTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        testTypeComboBox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        feesStatusComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        testOutcomeComboBox = new javax.swing.JComboBox<>();
        testDateChooser = new com.toedter.calendar.JDateChooser();
        resultDateChooser = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        appointmentByTextfield = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(0, 153, 153));
        jPanel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel3MouseMoved(evt);
            }
        });
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        updateButton.setBackground(new java.awt.Color(102, 102, 255));
        updateButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/update.png"))); // NOI18N
        updateButton.setText("Update Record");
        updateButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateButton.setContentAreaFilled(false);
        updateButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                updateButtonMouseMoved(evt);
            }
        });
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel3.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 250, 50));

        addButton.setBackground(new java.awt.Color(102, 102, 255));
        addButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/add.png"))); // NOI18N
        addButton.setText("Add Record");
        addButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addButton.setContentAreaFilled(false);
        addButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                addButtonMouseMoved(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel3.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 191, 250, 50));

        clearFieldsButton.setBackground(new java.awt.Color(102, 102, 255));
        clearFieldsButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clearFieldsButton.setForeground(new java.awt.Color(255, 255, 255));
        clearFieldsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/clearFields.png"))); // NOI18N
        clearFieldsButton.setText("Clear All Fields");
        clearFieldsButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        clearFieldsButton.setContentAreaFilled(false);
        clearFieldsButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                clearFieldsButtonMouseMoved(evt);
            }
        });
        clearFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsButtonActionPerformed(evt);
            }
        });
        jPanel3.add(clearFieldsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 250, 50));

        backButton.setBackground(new java.awt.Color(102, 102, 255));
        backButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/back.png"))); // NOI18N
        backButton.setText("Back");
        backButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        backButton.setContentAreaFilled(false);
        backButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backButtonMouseMoved(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel3.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 250, 50));

        deleteButton.setBackground(new java.awt.Color(102, 102, 255));
        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ehealthpro/images/trash.png"))); // NOI18N
        deleteButton.setText("Delete Record");
        deleteButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteButton.setContentAreaFilled(false);
        deleteButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                deleteButtonMouseMoved(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel3.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 250, 50));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1075, -5, 290, 750));

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Patient Test");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 20, 220, 50));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Test Date : ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 80, 27));

        patientTestTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        patientTestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        patientTestTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                patientTestTableMouseMoved(evt);
            }
        });
        patientTestTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientTestTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(patientTestTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 1010, 210));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Patients Test Record : ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Result Date :");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, -1, 27));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Appointment By :");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, -1, 27));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Test Type :");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 100, 80, 27));

        testTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Test Type" }));
        jPanel1.add(testTypeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 100, 280, 30));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Fees Status :");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 150, -1, 27));

        feesStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Fees Status", "Paid", "Unpaid" }));
        jPanel1.add(feesStatusComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 150, 280, 30));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Test Outcome :");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 200, -1, 27));

        testOutcomeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Test Outcome", "Positive", "Negative", "Pending" }));
        jPanel1.add(testOutcomeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 200, 280, 30));

        testDateChooser.setDateFormatString("yyyy-MM-dd HH:mm:ss");
        jPanel1.add(testDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 150, 290, 30));

        resultDateChooser.setDateFormatString("yyyy-MM-dd HH:mm:ss");
        jPanel1.add(resultDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, 290, 30));

        appointmentTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        appointmentTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                appointmentTableMouseMoved(evt);
            }
        });
        appointmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(appointmentTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 550, 1010, 170));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Appointments Table :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, -1, 20));
        jPanel1.add(appointmentByTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 100, 290, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 750));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseMoved
        if (updateButton.isEnabled()) {
            updateButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_updateButtonMouseMoved

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (appointmentByTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select appointment by field to update record.");
        } else if (testTypeComboBox.getSelectedItem().toString().equals("Select Test Type")) {
            JOptionPane.showMessageDialog(this, "Please select Test Type to update record.");
        } else if (feesStatusComboBox.getSelectedItem().toString().equals("Select Fees Status")) {
            JOptionPane.showMessageDialog(this, "Please select fees status to update record.");
        } else if (testOutcomeComboBox.getSelectedItem().toString().equals("Select Test Outcome")) {
            JOptionPane.showMessageDialog(this, "Please select Test Outcome to update record.");
        } else if (testDateChooser.getDate().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill test date field to update record.");
        } else if (resultDateChooser.getDate().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill result date to update record.");
        } else {
            String appointmentBy = appointmentByTextfield.getText();
            String testType = testTypeComboBox.getSelectedItem().toString();
            String feesStatus = feesStatusComboBox.getSelectedItem().toString();
            String testOutcome = testOutcomeComboBox.getSelectedItem().toString();
            Timestamp testDate = Timestamp.valueOf(sdf.format(testDateChooser.getDate()));
            Timestamp resultDate = Timestamp.valueOf(sdf.format(resultDateChooser.getDate()));
            AppointmentModel appointmentModel = new AppointmentDAOImpl().getAppointmentById(appointmentId);
            TestModel testModel = new TestDAOImpl().getTestByName(testType);
            PatientTestModel patientTestModel = new PatientTestModel();
            patientTestModel.setAppointmentModel(appointmentModel);
            patientTestModel.setFeesStatus(feesStatus);
            patientTestModel.setOutcome(testOutcome);
            patientTestModel.setTestModel(testModel);
            patientTestModel.setTestDate(testDate);
            patientTestModel.setResultDate(resultDate);
            patientTestModel.setModifiedBy(2);
            patientTestModel.setModifiedDate(currentDate);
            patientTestModel.setPatientTestId(patientTestId);
            PatientTestDAOImpl patientTestDAOImpl = new PatientTestDAOImpl();
            int result = patientTestDAOImpl.updatePatientTest(patientTestModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been successfully updated.");
                fillPatientTestTable();
            } else {
                JOptionPane.showMessageDialog(this, " record could not be updated,try again.");
            }
            clearAllFields();
            resetAddButton();
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void addButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseMoved
        if (addButton.isEnabled()) {
            addButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_addButtonMouseMoved

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (appointmentByTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select appointment by field from appointment table to add record.");
        } else if (testTypeComboBox.getSelectedItem().toString().equals("Select Test Type")) {
            JOptionPane.showMessageDialog(this, "Please select Test Type to add record.");
        } else if (feesStatusComboBox.getSelectedItem().toString().equals("Select Fees Status")) {
            JOptionPane.showMessageDialog(this, "Please select fees status to add record.");
        } else if (testDateChooser.getDate().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill test date field to add record.");
        } else if (resultDateChooser.getDate().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill result date to add record.");
        } else {
            String testType = testTypeComboBox.getSelectedItem().toString();
            String feesStatus = feesStatusComboBox.getSelectedItem().toString();
            String testOutcome = testOutcomeComboBox.getSelectedItem().toString();
            Timestamp testDate = Timestamp.valueOf(sdf.format(testDateChooser.getDate()));
            Timestamp resultDate = Timestamp.valueOf(sdf.format(resultDateChooser.getDate()));
            PatientModel patientModel = new PatientDAOImpl().getPatientByName(patientName);
            AppointmentModel appointmentModel = new AppointmentDAOImpl().getAppointmentById(appointmentId);
            TestModel testModel = new TestDAOImpl().getTestByName(testType);
            PatientTestModel patientTestModel = new PatientTestModel();
            patientTestModel.setAppointmentModel(appointmentModel);
            patientTestModel.setFeesStatus(feesStatus);
            patientTestModel.setOutcome("");
            patientTestModel.setPatientModel(patientModel);
            patientTestModel.setTestModel(testModel);
            patientTestModel.setCreatedBy(1);
            patientTestModel.setTestDate(testDate);
            patientTestModel.setResultDate(resultDate);
            patientTestModel.setCreatedDate(currentDate);
            patientTestModel.setModifiedBy(1);
            patientTestModel.setModifiedDate(currentDate);
            PatientTestDAOImpl patientTestDAOImpl = new PatientTestDAOImpl();
            int result = patientTestDAOImpl.addPatientTest(patientTestModel);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, result + " record has been successfully added.");
                fillPatientTestTable();
            } else {
                JOptionPane.showMessageDialog(this, " record could not be added,try again.");
            }
            clearAllFields();
            resetAddButton();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void clearFieldsButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFieldsButtonMouseMoved
        if (clearFieldsButton.isEnabled()) {
            clearFieldsButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_clearFieldsButtonMouseMoved

    private void clearFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsButtonActionPerformed
        clearAllFields();
    }//GEN-LAST:event_clearFieldsButtonActionPerformed

    private void backButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseMoved
        if (backButton.isEnabled()) {
            backButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_backButtonMouseMoved

    private void deleteButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseMoved
        if (deleteButton.isEnabled()) {
            deleteButton.setForeground(Color.red);
        }
    }//GEN-LAST:event_deleteButtonMouseMoved

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        PatientTestModel patientTestModel = new PatientTestModel();
        patientTestModel.setModifiedBy(2);
        patientTestModel.setModifiedDate(currentDate);
        patientTestModel.setPatientTestId(patientTestId);
        PatientTestDAOImpl patientTestDAOImpl = new PatientTestDAOImpl();
        int result = patientTestDAOImpl.deletePatientTestById(patientTestModel);
        if (result > 0) {
            JOptionPane.showMessageDialog(this, result + " record has been successfully deleted.");
            fillPatientTestTable();
        } else {
            JOptionPane.showMessageDialog(this, " record could not be deleted,try again.");
        }
        clearAllFields();
        resetAddButton();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void jPanel3MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(resetColor());
    }//GEN-LAST:event_jPanel3MouseMoved

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel3MouseClicked

    private void patientTestTableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientTestTableMouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(resetColor());
    }//GEN-LAST:event_patientTestTableMouseMoved

    private void patientTestTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientTestTableMouseClicked
        patientTestId = (Integer) patientTestTable.getValueAt(patientTestTable.getSelectedRow(), 0);
        PatientTestModel patientTestModel = new PatientTestDAOImpl().getPatientTestById(patientTestId);
        PatientModel patientModel = new PatientDAOImpl().getPatientById(patientTestModel.getPatientModel().getPatientId());
        AppointmentModel appointmentModel = new AppointmentDAOImpl().getAppointmentById(patientTestModel.getAppointmentModel().getAppointmentId());
        TestModel testModel = new TestDAOImpl().getTestById(patientTestModel.getTestModel().getTestId());
        appointmentByTextfield.setText(patientModel.getName());
        testTypeComboBox.setSelectedItem(testModel.getTest());
        feesStatusComboBox.setSelectedItem(patientTestModel.getFeesStatus());
        testOutcomeComboBox.setSelectedItem(patientTestModel.getOutcome());
        testDateChooser.setDate(patientTestModel.getTestDate());
        resultDateChooser.setDate(patientTestModel.getResultDate());
        setButtons();
    }//GEN-LAST:event_patientTestTableMouseClicked

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        addButton.setForeground(resetColor());
        deleteButton.setForeground(resetColor());
        updateButton.setForeground(resetColor());
        clearFieldsButton.setForeground(resetColor());
        backButton.setForeground(resetColor());
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        clearAllFields();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new MainMenuFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void appointmentTableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentTableMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_appointmentTableMouseMoved

    private void appointmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentTableMouseClicked
        appointmentId = (Integer) appointmentTable.getValueAt(appointmentTable.getSelectedRow(), 0);
        AppointmentModel appointmentModel = new AppointmentDAOImpl().getAppointmentById(appointmentId);
        appointmentByTextfield.setText(appointmentModel.getPatientModel().getName());
    }//GEN-LAST:event_appointmentTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientTestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientTestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientTestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientTestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientTestFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField appointmentByTextfield;
    private javax.swing.JTable appointmentTable;
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearFieldsButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> feesStatusComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable patientTestTable;
    private com.toedter.calendar.JDateChooser resultDateChooser;
    private com.toedter.calendar.JDateChooser testDateChooser;
    private javax.swing.JComboBox<String> testOutcomeComboBox;
    private javax.swing.JComboBox<String> testTypeComboBox;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    private void fillPatientTestTable() {
        ResultSet resultSet = new PatientTestDAOImpl().getPatientTests();
        patientTestTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }

    private void fillTestTypeComboBox() {
        ResultSet resultSet = new TestDAOImpl().getAllTests();
        try {
            while (resultSet.next()) {
                testTypeComboBox.addItem(resultSet.getString("Test Name"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillAppointmentTable() {
        ResultSet resultSet = new AppointmentDAOImpl().getAllAppointments();
        appointmentTable.setModel(DbUtils.resultSetToTableModel(resultSet));
    }

    private void clearAllFields() {
        testDateChooser.setDate(null);
        appointmentByTextfield.setText("");
        testTypeComboBox.setSelectedIndex(0);
        feesStatusComboBox.setSelectedIndex(0);
        testOutcomeComboBox.setSelectedIndex(0);
        patientTestTable.clearSelection();
        resultDateChooser.setDate(null);
        appointmentTable.clearSelection();
        resetAddButton();
    }

    private Color resetColor() {
        return Color.WHITE;
    }

    private void setButtons() {
        addButton.setEnabled(false);
        updateButton.setEnabled(true);
        deleteButton.setEnabled(true);
        testOutcomeComboBox.setEnabled(true);
    }

    private void resetAddButton() {
        addButton.setEnabled(true);
        updateButton.setEnabled(false);
        deleteButton.setEnabled(false);
        testOutcomeComboBox.setEnabled(false);
    } 
    
    private void disableComponents()
    {
        addButton.setVisible(false);
        updateButton.setVisible(false);
        deleteButton.setVisible(false);
        appointmentByTextfield.setEditable(false);
    }
    
    private void checkPermissions() {
        ResultSet assignedPermissions = new UserPermissionDAOImpl().getAssignedPermissions(LoginFrame.userType); 
        try {
            while(assignedPermissions.next())
            {
                PermissionModel permissionModel = new PermissionModel();
                permissionModel.setPermission(assignedPermissions.getString("Permission"));
                
                if(permissionModel.getPermission().equals("ADD_PATIENT_TEST"))
                {
                    addButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("DELETE_PATIENT_TEST"))
                {
                    deleteButton.setVisible(true);
                }
                if(permissionModel.getPermission().equals("UPDATE_PATIENT_TEST"))
                {
                    updateButton.setVisible(true);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainMenuFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
